package com.example.tripkey;

import android.app.DatePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.example.tripkey.databinding.ActivityAddTripBinding;
import com.example.tripkey.network.ApiClient;
import com.example.tripkey.network.ApiService;
import com.example.tripkey.network.GptRequest;
import com.example.tripkey.network.GptResponse;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.gson.Gson;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import retrofit2.Call;

public class AddTripActivity extends AppCompatActivity {

    private ActivityAddTripBinding binding;
    private LinearLayout mustVisitContainer;
    private TextView startDateInput, endDateInput, currentMBTI;
    private String selectedWho = "";
    private String selectedStyle = "";
    private String teamId;
    private static final String TAG = "AddTripActivity";
    private static final int REQUEST_CODE_LOCATION = 1001;
    private LinearLayout loadingLayout;

    private ActivityResultLauncher<Intent> mbtiResultLauncher;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityAddTripBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        loadingLayout = findViewById(R.id.loading_layout);

        teamId = getIntent().getStringExtra("teamId");

        // ÏÑ†ÌÉùÎêú ÏπúÍµ¨Îì§Ïùò ID Î¶¨Ïä§Ìä∏ Î∞õÍ∏∞
        ArrayList<String> selectedFriendsIds = getIntent().getStringArrayListExtra("selectedFriendsIds");
        if (selectedFriendsIds != null) {
            Log.d(TAG, "ÏÑ†ÌÉùÎêú ÏπúÍµ¨ ID Î¶¨Ïä§Ìä∏: " + selectedFriendsIds);
            calculateGroupMBTI(selectedFriendsIds, teamMBTI -> currentMBTI.setText(teamMBTI));
        }

        EditText travelNameInput = binding.travelNameInput;
        EditText locationInput = binding.locationInput;
        EditText placeToStayInput = binding.placeToStayInput;
        startDateInput = binding.startDateInput;
        endDateInput = binding.endDateInput;
        currentMBTI = binding.currentMbtiText;


        Button whoAloneButton = binding.whoAloneButton;
        Button whoCoupleButton = binding.whoCoupleButton;
        Button whoFriendButton = binding.whoFriendButton;
        Button whoFamilyButton = binding.whoFamilyButton;
        Button whoCoworkerButton = binding.whoCoworkerButton;
        Button whoPetButton = binding.whoPetButton;

        Button styleKeepButton = binding.styleKeepButton;
        Button styleAnalyzeButton = binding.styleAnalyzeButton;

        mustVisitContainer = findViewById(R.id.must_visit_container);
        ImageButton addPlaceButton = findViewById(R.id.add_place_button);
        addPlaceButton.setOnClickListener(v -> addNewPlaceField());

        // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÏÑ§Ï†ï
        ImageButton backButton = findViewById(R.id.button_back);
        backButton.setOnClickListener(v -> finish());


        // Ïû•ÏÜå
        ImageButton searchLocationBtn = binding.locationSearchButton;
        searchLocationBtn.setOnClickListener(v -> {
            Intent intent = new Intent(this, LocationSearchActivity.class);
            startActivityForResult(intent, REQUEST_CODE_LOCATION);
        });

        // Ïû•ÏÜå
        ImageButton searchAccomodationBtn = binding.accomodationSearchButton;
        searchAccomodationBtn.setOnClickListener(v -> {
            Intent intent = new Intent(this, AccomodationSearchActivity.class);
            startActivityForResult(intent, REQUEST_CODE_LOCATION);
        });

        startDateInput.setOnClickListener(v -> showDatePickerDialog(true));
        endDateInput.setOnClickListener(v -> showDatePickerDialog(false));

        whoAloneButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoAloneButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="ÌòºÏûê";
        });

        whoCoupleButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoCoupleButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="Ïó∞Ïù∏";
        });

        whoFriendButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoFriendButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="ÏπúÍµ¨";
        });
        whoFamilyButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoFamilyButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="Í∞ÄÏ°±";
        });

        whoCoworkerButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoCoworkerButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="ÎèôÎ£å";
        });

        whoPetButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoPetButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="Î∞òÎ†§ÎèôÎ¨º";
        });


        styleKeepButton.setOnClickListener(v -> {
            resetStyleButtons(styleKeepButton, styleAnalyzeButton);
            styleKeepButton.setBackgroundResource(R.drawable.green_button);
            selectedStyle = "Ïú†ÏßÄ";
        });

        mbtiResultLauncher = registerForActivityResult(
                new ActivityResultContracts.StartActivityForResult(),
                result -> {
                    if (result.getResultCode() == RESULT_OK) {
                        Intent data = result.getData();
                        if (data != null) {
                            String newMBTI = data.getStringExtra("mbti_result");
                            if (newMBTI != null) {
                                TextView currentMBTIText = findViewById(R.id.current_mbti_text);
                                currentMBTIText.setText(newMBTI);
                            }
                        }
                    }
                });

        styleAnalyzeButton.setOnClickListener(v -> {
            resetStyleButtons(styleKeepButton, styleAnalyzeButton);
            styleAnalyzeButton.setBackgroundResource(R.drawable.green_button);
            selectedStyle = "Îã§Ïãú Î∂ÑÏÑù";

            // üîΩ ReMBTITestActivityÎ°ú Ïù¥Îèô
            Intent intent = new Intent(this, ReMBTITestActivity.class);
            mbtiResultLauncher.launch(intent);
        });

        binding.aiScheduleButton.setOnClickListener(v -> saveTripData());
    }


private void resetWhoButtons(Button whoAloneButton, Button whoCoupleButton, Button whoFriendButton,Button whoFamilyButton, Button whoParentButton, Button whoChildButton) {
    whoAloneButton.setBackgroundResource(R.drawable.gray_box_full);
    whoCoupleButton.setBackgroundResource(R.drawable.gray_box_full);
    whoFriendButton.setBackgroundResource(R.drawable.gray_box_full);
    whoFamilyButton.setBackgroundResource(R.drawable.gray_box_full);
    whoParentButton.setBackgroundResource(R.drawable.gray_box_full);
    whoChildButton.setBackgroundResource(R.drawable.gray_box_full);

}

private void resetStyleButtons(Button styleKeepButton, Button styleAnalyzeButton) {
    styleKeepButton.setBackgroundResource(R.drawable.gray_box_full);
    styleAnalyzeButton.setBackgroundResource(R.drawable.gray_box_full);
}
    private void addNewPlaceField() {
        LinearLayout newFieldLayout = new LinearLayout(this);
        newFieldLayout.setOrientation(LinearLayout.HORIZONTAL);
        newFieldLayout.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
        ));

        EditText newPlaceField = new EditText(this);
        newPlaceField.setLayoutParams(new LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                1
        ));
        newPlaceField.setHint("Ïû•ÏÜå ÏûÖÎ†•");

        ImageButton deleteButton = new ImageButton(this);
        deleteButton.setImageResource(R.drawable.delete);
        deleteButton.setBackground(null);
        deleteButton.setOnClickListener(v -> mustVisitContainer.removeView(newFieldLayout));

        newFieldLayout.addView(newPlaceField);
        newFieldLayout.addView(deleteButton);

        mustVisitContainer.addView(newFieldLayout);
    }

    private void showDatePickerDialog(boolean isStartDate) {
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);

        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this,
                (view, selectedYear, selectedMonth, selectedDayOfMonth) -> {
                    String formattedMonth = String.format("%02d", selectedMonth + 1);
                    String formattedDay = String.format("%02d", selectedDayOfMonth);

                    String selectedDate = selectedYear + "-" + formattedMonth + "-" + formattedDay;
                    if (isStartDate) {
                        startDateInput.setText(selectedDate);
                    }else {
                        // startDateÏôÄ ÎπÑÍµê
                        String startDateText = startDateInput.getText().toString();
                        if (!startDateText.isEmpty()) {
                            String[] startDateParts = startDateText.split("-");
                            int startYear = Integer.parseInt(startDateParts[0]);
                            int startMonth = Integer.parseInt(startDateParts[1]);
                            int startDay = Integer.parseInt(startDateParts[2]);

                            // ÏÑ†ÌÉùÌïú ÎÇ†ÏßúÍ∞Ä startDateÎ≥¥Îã§ Ïù¥Ï†ÑÏù∏ÏßÄ ÌôïÏù∏
                            if (selectedYear < startYear ||
                                    (selectedYear == startYear && selectedMonth + 1 < startMonth) ||
                                    (selectedYear == startYear && selectedMonth + 1 == startMonth && selectedDayOfMonth < startDay)) {
                                Toast.makeText(this, "Ï¢ÖÎ£å ÎÇ†ÏßúÎäî ÏãúÏûë ÎÇ†Ïßú Ïù¥ÌõÑÏó¨Ïïº Ìï©ÎãàÎã§.", Toast.LENGTH_SHORT).show();
                                return;
                            }
                        }
                        endDateInput.setText(selectedDate);
                    }
                },
                year, month, dayOfMonth
        );

        // endDate ÏÑ†ÌÉù Ïãú, startDate Ïù¥ÌõÑ ÎÇ†ÏßúÎßå Í∞ÄÎä•ÌïòÎèÑÎ°ù Ï†úÌïú
        if (!isStartDate) {
            String startDateText = startDateInput.getText().toString();
            if (!startDateText.isEmpty()) {
                String[] startDateParts = startDateText.split("-");
                int startYear = Integer.parseInt(startDateParts[0]);
                int startMonth = Integer.parseInt(startDateParts[1]) - 1; // CalendarÏóêÏÑú 0Î∂ÄÌÑ∞ ÏãúÏûë
                int startDay = Integer.parseInt(startDateParts[2]);

                Calendar minDate = Calendar.getInstance();
                minDate.set(startYear, startMonth, startDay);
                datePickerDialog.getDatePicker().setMinDate(minDate.getTimeInMillis());
            }
        }

        datePickerDialog.show();
    }
    private void calculateGroupMBTI(ArrayList<String> selectedFriendsIds, OnMBTICalculatedListener listener) {
        SharedPreferences sharedPreferences = getSharedPreferences("UserPrefs", Context.MODE_PRIVATE);
        String userId = sharedPreferences.getString("userId", null);
        if (userId == null) {
            Toast.makeText(this, "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
            return;
        }

        FirebaseFirestore db = FirebaseFirestore.getInstance();
        final String[] currentUserMBTI = new String[1]; // üí° final Î∞∞Ïó¥Î°ú ÎûòÌïë

        db.collection("users").document(userId).get()
                .addOnSuccessListener(documentSnapshot -> {
                    currentUserMBTI[0] = documentSnapshot.getString("mbti");
                    if (currentUserMBTI[0] == null || currentUserMBTI[0].length() != 5) {
                        currentUserMBTI[0] = "Î∂ÑÏÑùÌïÑÏöî"; // fallback
                    }

                    Map<Character, Integer> mbtiCount = new HashMap<>();
                    int[] processedCount = {0};
                    int totalCount = selectedFriendsIds.size();

                    for (String friendId : selectedFriendsIds) {
                        db.collection("users").document(friendId).get()
                                .addOnSuccessListener(friendSnapshot -> {
                                    if (friendSnapshot.exists() && friendSnapshot.contains("mbti")) {
                                        String mbti = friendSnapshot.getString("mbti");
                                        if (mbti != null && mbti.length() == 5) {
                                            for (char c : mbti.toCharArray()) {
                                                mbtiCount.put(c, mbtiCount.getOrDefault(c, 0) + 1);
                                            }
                                        }
                                    }
                                    processedCount[0]++;
                                    if (processedCount[0] == totalCount) {
                                        listener.onMBTICalculated(determineGroupMBTI(mbtiCount, currentUserMBTI[0]));
                                    }
                                })
                                .addOnFailureListener(e -> {
                                    processedCount[0]++;
                                    if (processedCount[0] == totalCount) {
                                        listener.onMBTICalculated(determineGroupMBTI(mbtiCount, currentUserMBTI[0]));
                                    }
                                });
                    }
                });
    }



    private String determineGroupMBTI(Map<Character, Integer> mbtiCount, String currentUserMBTI) {
        char[] mbtiPositions = {'I', 'O', 'B', 'C', 'R', 'E', 'M', 'F','T','L'};
        StringBuilder groupMBTI = new StringBuilder();

        for (int i = 0; i < 5; i++) {
            char first = mbtiPositions[i * 2];
            char second = mbtiPositions[i * 2 + 1];

            int countFirst = mbtiCount.getOrDefault(first, 0);
            int countSecond = mbtiCount.getOrDefault(second, 0);

            if (countFirst > countSecond) {
                groupMBTI.append(first);
            } else if (countFirst < countSecond) {
                groupMBTI.append(second);
            } else {
                // Í∞ôÏùÑ Í≤ΩÏö∞ ÌòÑÏû¨ Ïú†Ï†ÄÏùò MBTIÏóêÏÑú Ìï¥Îãπ ÏúÑÏπòÏùò Í∞í ÏÇ¨Ïö©
                groupMBTI.append(currentUserMBTI.charAt(i));
            }
        }

        return groupMBTI.toString();
    }


    private interface OnMBTICalculatedListener {
        void onMBTICalculated(String teamMBTI);
    }

    private void saveTripData() {
        String travelName = binding.travelNameInput.getText().toString().trim();
        String location = binding.locationInput.getText().toString().trim();
        String placeToStay=binding.placeToStayInput.getText().toString().trim();
        String startDate = startDateInput.getText().toString().trim();
        String endDate = endDateInput.getText().toString().trim();
        String groupMBTI = currentMBTI.getText().toString().trim();
        String who = selectedWho;

        if (travelName.isEmpty() || location.isEmpty() || placeToStay.isEmpty()|| startDate.isEmpty() || endDate.isEmpty() || selectedWho.isEmpty() || selectedStyle.isEmpty()) {
            Toast.makeText(this, "Î™®Îì† Ìï≠Î™©ÏùÑ Ï±ÑÏõåÏ£ºÏÑ∏Ïöî!", Toast.LENGTH_SHORT).show();
            return;
        }

        SharedPreferences sharedPreferences = getSharedPreferences("UserPrefs", Context.MODE_PRIVATE);
        String userId = sharedPreferences.getString("userId", null);
        if (userId == null) {
            Toast.makeText(this, "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
            return;
        }

        ArrayList<String> selectedFriendsIds = getIntent().getStringArrayListExtra("selectedFriendsIds");

        calculateGroupMBTI(selectedFriendsIds, teamMBTI -> {

            FirebaseFirestore db = FirebaseFirestore.getInstance();
            String travelId = db.collection("users").document(userId)
                    .collection("travel").document().getId();

            Map<String, Object> travelData = new HashMap<>();
            travelData.put("travelId", travelId); // ÏπúÍµ¨ Ï™ΩÏóêÎèÑ travelId ÎèôÏùºÌïòÍ≤å Ï†ÄÏû•
            travelData.put("travelName", travelName);
            travelData.put("location", location);
            travelData.put("startDate", startDate);
            travelData.put("endDate", endDate);
            travelData.put("who", selectedWho);
            travelData.put("travelStyle", selectedStyle);
            travelData.put("teamMBTI", teamMBTI);
            travelData.put("teamId", teamId);
            travelData.put("creatorId", userId); // ÎàÑÍ∞Ä ÎßåÎì† Ïó¨ÌñâÏù∏ÏßÄ Î™ÖÏãú
            travelData.put("placeToStay",placeToStay);


            for (int i = 0; i < mustVisitContainer.getChildCount(); i++) {
                View child = mustVisitContainer.getChildAt(i);
                if (child instanceof LinearLayout) {
                    EditText placeInput = (EditText) ((LinearLayout) child).getChildAt(0);
                    String place = placeInput.getText().toString().trim();
                    if (!place.isEmpty()) {
                        travelData.put("place_" + i, place);
                    }
                }
            }

            // ÎÇòÏùò travel Í≤ΩÎ°úÏóê Ï†ÄÏû•
            db.collection("users").document(userId)
                    .collection("travel").document(travelId)
                    .set(travelData)
                    .addOnSuccessListener(aVoid -> {
                        // 2. ÏπúÍµ¨Îì§ travel Í≤ΩÎ°úÏóêÎèÑ ÎèôÏùºÌïòÍ≤å Ï†ÄÏû•
                        if (selectedFriendsIds != null && !selectedFriendsIds.isEmpty()) {
                            for (String friendId : selectedFriendsIds) {
                                db.collection("users").document(friendId)
                                        .collection("travel").document(travelId)
                                        .set(travelData);
                            }
                        }

//                        Toast.makeText(this, "Ïó¨Ìñâ ÏùºÏ†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
//                        Intent intent = new Intent(this, MainActivity.class);
//                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
//                        startActivity(intent);
//                        finish();
                    })
                    .addOnFailureListener(e ->
                            Toast.makeText(this, "Ï†ÄÏû• Ïã§Ìå®: " + e.getMessage(), Toast.LENGTH_SHORT).show()
                    );

            // Ïó¨Ìñâ MBTIÏóê ÎßûÎäî Ïä§ÌÉÄÏùº ÏÑ§Î™Ö
            final String groupMBTIStyle;

            switch (groupMBTI) {
                case "IBRFT":
                    groupMBTIStyle = "Ï°∞Ïö©Ìïú Ìò∏ÌÖîÏóêÏÑú Ïó¨Ïú†Î°≠Í≤å, ÌïòÏßÄÎßå ÌïòÎ£®Îäî ÏïåÏ∞®Í≤å! ÎßõÏßëÏùÑ Ìñ•Ìï¥ Î∂ÄÏßÄÎü∞Ìûà Îã¨Î¶∞Îã§!Í≥†Í∏â Ìò∏ÌÖîÏóêÏÑú Ïó¨Ïú†Î°úÏö¥ ÏïÑÏπ®ÏùÑ ÎßûÏù¥ÌïòÏßÄÎßå, ÌïòÎ£® ÏùºÏ†ïÏùÄ ÍΩâ Ï±ÑÏõå Î≥¥ÎÇ∏Îã§.ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìï¥ Ïú†Î™Ö ÎßõÏßëÏùÑ Ïó¨Îü¨ Í≥≥ Îπ†Î•¥Í≤å Î∞©Î¨∏ÌïòÎ©∞, ÎπÑÏö©ÏùÄ ÌÅ¨Í≤å Ïã†Í≤Ω Ïì∞ÏßÄ ÏïäÎäî ÏïåÏ∞¨ ÎØ∏Ïãù Ïó¨ÌñâÏûê Ïä§ÌÉÄÏùº.";
                    break;
                case "IBRFL":
                    groupMBTIStyle = "Ìò∏ÌÖîÏóêÏÑú ÌïúÍªè Ïó¨Ïú† Î∂ÄÎ¶¨Í≥†, ÎßõÏßëÏùÄ Ï§Ñ ÏÑúÏÑúÎùºÎèÑ Íº≠ Í∞ÑÎã§!Ï°∞Ïö©ÌïòÍ≥† Í≥†Í∏âÏä§Îü¨Ïö¥ ÏàôÏÜåÏóêÏÑú ÎäêÍ∏ãÌïòÍ≤å ÌïòÎ£®Î•º ÏãúÏûëÌïòÍ≥†, ÎåÄÏ§ëÍµêÌÜµÏúºÎ°ú Ï≤úÏ≤úÌûà ÎèÑÏãúÎ•º ÎàÑÎπàÎã§.ÎßõÏßë Ìà¨Ïñ¥Îäî Ïó¨Ïú†Î°≠Í≤å Ï¶êÍ∏∞Îêò, ÎπÑÏö©ÏùÄ ÏïÑÎÅºÏßÄ ÏïäÎäîÎã§.\n" +
                            "ÎßéÏùÄ Í≥≥ÏùÑ Î∞©Î¨∏ÌïòÍ∏∞Î≥¥Îã§ ÌÄÑÎ¶¨Ìã∞ÏôÄ Î∂ÑÏúÑÍ∏∞Ïóê ÏßëÏ§ëÌïòÎäî ‚ÄòÌîåÎ†âÏä§‚ÄôÏôÄ ‚ÄòÌûêÎßÅ‚ÄôÏùÑ ÎèôÏãúÏóê Ï¶êÍ∏∞Îäî Ïó¨Ïú†Ìòï Ïó¨ÌñâÏûê.";
                    break;
                case "IBRMT":
                    groupMBTIStyle = "Ï°∞Ïö©Ìïú Ìò∏ÌÖîÏóêÏÑú ÌïòÎ£®Î•º ÏãúÏûëÌï¥ Ï†ÑÏãúÏôÄ Ïú†Ï†ÅÏßÄÎ•º Îπ†ÏßêÏóÜÏù¥ ÎèåÏïÑÎ≥∏Îã§!Í≥†Í∏â ÏàôÏÜåÏóêÏÑú Ï∞®Î∂ÑÌûà ÏïÑÏπ®ÏùÑ ÎßûÏù¥ÌïòÍ≥†, ÎåÄÏ§ëÍµêÌÜµÏùÑ ÌÉÄÍ≥† Ïó¨Îü¨ Î¨∏Ìôî Î™ÖÏÜåÎ•º Ìö®Ïú®Ï†ÅÏúºÎ°ú ÌÉêÎ∞©ÌïúÎã§.ÏûÖÏû•Î£åÏôÄ Í∏∞ÎÖêÌíà Íµ¨Îß§Ïóê ÏïÑÎÇåÏóÜÏúºÎ©∞, Îπ°Îπ°Ìïú ÏùºÏ†ï ÏÜçÏóêÏÑúÎèÑ Î¨∏ÌôîÏôÄ Ìö®Ïú®ÏùÑ Î™®Îëê Ï±ôÍ∏∞Îäî ÌÉêÎ∞©Ìòï Ïó¨ÌñâÏûê.";
                    break;
                case "IBRML":
                    groupMBTIStyle = "Ï†ÑÏãúÎèÑ Ïú†Ï†ÅÏßÄÎèÑ Ï≤úÏ≤úÌûà, ÌïòÎ£® ÌïúÎëê Í≥≥Ïù¥Î©¥ Ï∂©Î∂ÑÌïòÎã§!Ï°∞Ïö©Ìïú Í≥†Í∏â ÏàôÏÜåÏóêÏÑú Ï∂©Î∂ÑÌûà Ïâ¨Í≥†, ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìï¥ Î¨∏Ìôî Î™ÖÏÜåÎ•º Ïó¨Ïú†Î°≠Í≤å Î∞©Î¨∏ÌïúÎã§.Ïó¨Îü¨ Í≥≥ÏùÑ Îπ†Î•¥Í≤å ÎèåÍ∏∞Î≥¥Îã§Îäî Ìïú Í≥≥ÏóêÏÑú ÍπäÏù¥ ÏûàÍ≤å Ï¶êÍ∏∞Î©∞, ÏãúÍ∞ÑÍ≥º ÎßàÏùå Î™®Îëê ÎÑâÎÑâÌïòÍ≤å ‚ÄòÎ¨∏Ìôî ÌûêÎßÅ‚ÄôÏóê ÏßëÏ§ëÌïòÎäî Ïó¨Ïú†Ìòï Ïó¨ÌñâÏûê.";
                    break;
                case "IBEFT":
                    groupMBTIStyle = "Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ìú¥ÏãùÌïòÎêò, ÎßõÏßëÏùÄ ÌïòÎ£®Ïóê ÏïåÏ∞®Í≤å Í≥µÎûµÌïúÎã§!ÏïåÎú∞Ìïú ÏàôÏÜåÏóêÏÑú Ìé∏ÏïàÌûà Ïâ¨Î©¥ÏÑú, ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìï¥ Ïó¨Îü¨ ÎßõÏßëÏùÑ Îπ†Î•¥Í≤å Ï∞æÏïÑÎã§ÎãåÎã§.ÎπÑÏö©ÏùÑ ÏïÑÎÅºÎ©¥ÏÑúÎèÑ ÎßõÏûàÎäî ÏùåÏãùÏùÑ ÎÜìÏπòÏßÄ ÏïäÍ≥†, Îπ°Îπ°Ìïú ÏùºÏ†ï ÏÜçÏóêÏÑú ÏµúÎåÄÌïú ÎßéÏùÄ ÎØ∏ÏãùÏùÑ Ï¶êÍ∏∞Îäî ÏïåÎú∞ Ïó¨ÌñâÏûê.";
                    break;
                case "IBEFL":
                    groupMBTIStyle = "Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ïó¨Ïú†Î°≠Í≤å Ïâ¨Í≥†, ÎßõÏûàÎäî ÏùåÏãùÎèÑ Ï≤úÏ≤úÌûà Ï¶êÍ∏¥Îã§!Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ Ìò∏ÌÖîÏóêÏÑú ÎäêÍ∏ãÌïú ÏïÑÏπ®ÏùÑ Î≥¥ÎÇ¥Í≥†, ÎåÄÏ§ëÍµêÌÜµÏúºÎ°ú ÎßõÏßëÏùÑ Ï≤úÏ≤úÌûà Ï∞æÏïÑÍ∞ÑÎã§.ÎèàÏùÑ ÏïÑÎÅºÎ©¥ÏÑúÎèÑ Ïó¨ÌñâÏùò Ï¶êÍ±∞ÏõÄÏùÑ ÎÜìÏπòÏßÄ ÏïäÍ≥†, ÎßõÍ≥º Ìú¥ÏãùÏùÑ Ï°∞ÌôîÎ°≠Í≤å Ï¶êÍ∏∞Îäî ÏïåÎú∞ ÎØ∏ÏãùÍ∞Ä Ïä§ÌÉÄÏùº.";
                    break;
                case "IBEMT":
                    groupMBTIStyle = "Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ìú¥Ïãù, ÌïòÏßÄÎßå Î¨∏Ìôî ÌÉêÎ∞©ÏùÄ ÏïåÏ∞®Í≤å!Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ìé∏ÏïàÌûà Ïâ¨Î©¥ÏÑú, ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìï¥ Ïó¨Îü¨ Î∞ïÎ¨ºÍ¥ÄÍ≥º Ïú†Ï†ÅÏßÄÎ•º Îπ†Î•¥Í≤å ÎèåÏïÑÎã§ÎãåÎã§.ÎπÑÏö©ÏùÄ Ï†àÏïΩÌïòÏßÄÎßå, ÌïòÎ£®Ïóê Í∞ÄÎä•Ìïú ÎßéÏùÄ Î¨∏Ìôî Î™ÖÏÜåÎ•º Î∞©Î¨∏ÌïòÎ©∞ ÏïåÏ∞¨ ÏùºÏ†ïÏùÑ ÏÜåÌôîÌïòÎäî Ïã§ÏÜçÌòï ÌÉêÎ∞© Ïó¨ÌñâÏûê.";
                    break;
                case "IBEML":
                    groupMBTIStyle = "Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ïó¨Ïú†Î°≠Í≤å Ïâ¨Í≥†, Î¨∏Ìôî Î™ÖÏÜåÎèÑ Ï≤úÏ≤úÌûà Ï¶êÍ∏¥Îã§.Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ Ìò∏ÌÖîÏóêÏÑú ÎäêÍ∏ãÌïú ÏïÑÏπ®ÏùÑ Î≥¥ÎÇ¥Í≥†, ÎåÄÏ§ëÍµêÌÜµÏùÑ ÌÉÄÍ≥† Î∞ïÎ¨ºÍ¥ÄÏù¥ÎÇò Ïú†Ï†ÅÏßÄÎ•º Ï≤úÏ≤úÌûà Î∞©Î¨∏ÌïúÎã§.ÎèàÏùÄ ÏïÑÎÅºÎ©¥ÏÑúÎèÑ Î¨∏Ìôî Ïó¨ÌñâÏùò ÍπäÏù¥Î•º ÎÜìÏπòÏßÄ ÏïäÍ≥†, Ïó¨Ïú†Î°úÏö¥ ÏùºÏ†ïÏúºÎ°ú ÌûêÎßÅÌïòÎäî ÏïåÎú∞ Î¨∏Ìôî Ïó¨ÌñâÏûê.";
                    break;
                case "ICRFT":
                    groupMBTIStyle = "Îü≠ÏÖîÎ¶¨Ìïú ÏàôÏÜåÏóêÏÑú Ï∞®Î•º ÌÉÄÍ≥†, ÌïòÎ£®ÎèÑ Îπ†ÏßêÏóÜÏù¥ ÎØ∏Ïãù ÌÉêÎ∞©!Í≥†Í∏â ÏàôÏÜåÏóêÏÑú Ìé∏ÏïàÌûà Î®∏Î¨ºÎ©∞, Ï∞®ÎÇò ÌÉùÏãúÎ•º Ïù¥Ïö©Ìï¥ Ïú†Î™Ö ÎßõÏßëÏùÑ Î∞îÏÅòÍ≤å Ï∞æÏïÑÎã§ÎãåÎã§.ÎèàÏùÑ ÏïÑÎÅºÏßÄ ÏïäÍ≥†, ÌïòÎ£®Ïóê Ïó¨Îü¨ Í≥≥ÏùÑ ÏïåÏ∞®Í≤å Î∞©Î¨∏Ìï¥ ÏµúÍ≥†Ïùò ÏùåÏãùÍ≥º Í≤ΩÌóòÏùÑ Ï¶êÍ∏∞Îäî Í≥†Í∏â ÎØ∏Ïãù Ïó¨ÌñâÏûê.";
                    break;
                case "ICRFL":
                    groupMBTIStyle = "Îü≠ÏÖîÎ¶¨Ìïú ÏàôÏÜåÏóêÏÑú Ïó¨Ïú†Î°≠Í≤å, Ï∞®Î•º ÌÉÄÍ≥† Ï≤úÏ≤úÌûà ÎßõÏßëÏùÑ Ï¶êÍ∏¥Îã§.Í≥†Í∏â ÏàôÏÜåÏóêÏÑú ÌïúÍªè Ìú¥ÏãùÌïòÎ©∞, Ï∞®ÎÇò ÌÉùÏãúÎ•º ÌÉÄÍ≥† ÎßõÏßëÏùÑ Ïó¨Ïú†Î°≠Í≤å Î∞©Î¨∏ÌïúÎã§.ÎπÑÏö© Í±±Ï†ï ÏóÜÏù¥ ÏµúÍ≥†Ïùò ÏùåÏãùÍ≥º Î∂ÑÏúÑÍ∏∞Î•º ÎäêÎÅºÎ©∞, ÎäêÍ∏ãÌïú ÏùºÏ†ïÏúºÎ°ú ÎØ∏ÏãùÍ≥º ÌûêÎßÅÏùÑ ÎèôÏãúÏóê ÎàÑÎ¶¨Îäî Ïó¨ÌñâÏûê.";
                    break;
                case "ICRMT":
                    groupMBTIStyle = "Îü≠ÏÖîÎ¶¨ ÏàôÏÜåÏóêÏÑú ÏãúÏûëÌï¥, Ï∞®Î°ú Îπ†Î•¥Í≤å Î¨∏Ìôî ÌÉêÎ∞©!Í≥†Í∏â ÏàôÏÜåÏóêÏÑú Ìé∏ÏïàÌûà Î®∏Î¨∏ Îí§, Ï∞®ÎÇò ÌÉùÏãúÎ•º ÌÉÄÍ≥† Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥Ä, Ïú†Ï†ÅÏßÄÎ•º Îπ°Îπ°ÌïòÍ≤å Ïó¨Îü¨ Í≥≥ Î∞©Î¨∏ÌïúÎã§.ÎπÑÏö©ÏùÄ ÏïÑÎÅºÏßÄ ÏïäÍ≥†, Î¨∏ÌôîÏôÄ ÏòàÏà†ÏùÑ ÏµúÎåÄÌïú ÎßéÏù¥ Í≤ΩÌóòÌïòÎ©∞ ÏïåÏ∞¨ ÏùºÏ†ïÏùÑ ÏÜåÌôîÌïòÎäî ÌÉêÎ∞©Ìòï Ïó¨ÌñâÏûê.";
                    break;
                case "ICRML":
                    groupMBTIStyle = "Îü≠ÏÖîÎ¶¨ ÏàôÏÜåÏóêÏÑú Ïó¨Ïú†Î°≠Í≤å Ïâ¨Í≥†, Ï∞®Î°ú Ï≤úÏ≤úÌûà Î¨∏Ìôî Î™ÖÏÜåÎ•º Ï¶êÍ∏¥Îã§.Í≥†Í∏â ÏàôÏÜåÏóêÏÑú Ï∂©Î∂ÑÌûà Ìú¥ÏãùÌïòÎ©∞, Ï∞®ÎÇò ÌÉùÏãúÎ•º Ïù¥Ïö©Ìï¥ Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ ÎäêÍ∏ãÌïòÍ≤å Î∞©Î¨∏ÌïúÎã§.ÎèàÏùÑ ÏïÑÎÅºÏßÄ ÏïäÍ≥†, ÌïúÎëê Í≥≥ÏùÑ ÍπäÏù¥ ÏûàÍ≤å Ï¶êÍ∏∞Î©∞ Ïó¨Ïú†Î°úÏö¥ Î¨∏Ìôî ÌûêÎßÅÏùÑ Ï∂îÍµ¨ÌïòÎäî Ïó¨ÌñâÏûê.";
                    break;
                case "ICEFT":
                    groupMBTIStyle = "Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ï∞®Î°ú Îπ†Î•¥Í≤å ÎßõÏßë Í≥µÎûµ!Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ìé∏ÏïàÌûà Ïâ¨Î©¥ÏÑú, Ï∞®ÎÇò ÌÉùÏãúÎ•º ÌÉÄÍ≥† Ïó¨Îü¨ ÎßõÏßëÏùÑ Î∞îÏÅòÍ≤å Î∞©Î¨∏ÌïúÎã§.ÎèàÏùÑ ÏïÑÎÅºÎ©¥ÏÑúÎèÑ ÌïòÎ£®Ïóê Í∞ÄÎä•Ìïú ÎßéÏùÄ ÎßõÏßëÏùÑ ÏïåÏ∞®Í≤å Ï¶êÍ∏∞Îäî Ïã§ÏÜçÌåå ÎØ∏Ïãù Ïó¨ÌñâÏûê.";
                    break;
                case "ICEFL":
                    groupMBTIStyle = "Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ïó¨Ïú†Î°≠Í≤å, Ï∞®Î°ú Ï≤úÏ≤úÌûà ÎßõÏßë Ï¶êÍ∏∞Í∏∞.Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú ÎäêÍ∏ãÌïòÍ≤å Ïâ¨Í≥†, Ï∞®ÎÇò ÌÉùÏãúÎ•º ÌÉÄÍ≥† ÎßõÏßëÏùÑ Ïó¨Ïú†Î°≠Í≤å Ï∞æÏïÑÎã§ÎãåÎã§.ÎπÑÏö©ÏùÑ Ï†àÏïΩÌïòÎ©¥ÏÑúÎèÑ ÎßõÏûàÎäî ÏùåÏãùÏùÑ Ï≤úÏ≤úÌûà Ï¶êÍ∏∞Î©∞ ÌûêÎßÅÌïòÎäî ÏïåÎú∞ ÎØ∏Ïãù Ïó¨ÌñâÏûê.";
                    break;
                case "ICEMT":
                    groupMBTIStyle = "Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ï∞®Î°ú Îπ†Î•¥Í≤å Î¨∏Ìôî ÌÉêÎ∞©!Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ìé∏ÏïàÌûà Ïâ¨Í≥†, Ï∞®ÎÇò ÌÉùÏãúÎ•º ÌÉÄÍ≥† Î∞ïÎ¨ºÍ¥Ä, ÎØ∏Ïà†Í¥Ä, Ïú†Ï†ÅÏßÄÎ•º Î∞îÏÅòÍ≤å Ïó¨Îü¨ Í≥≥ Î∞©Î¨∏ÌïúÎã§.ÎπÑÏö©ÏùÑ ÏïÑÎÅºÎ©¥ÏÑúÎèÑ ÌïòÎ£®Ïóê Í∞ÄÎä•Ìïú ÎßéÏùÄ Î¨∏Ìôî Î™ÖÏÜåÎ•º ÏïåÏ∞®Í≤å ÎèåÏïÑÎ≥¥Îäî Ïã§ÏÜçÌòï ÌÉêÎ∞© Ïó¨ÌñâÏûê.";
                    break;
                case "ICEML":
                    groupMBTIStyle = "Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú Ïó¨Ïú†Î°≠Í≤å, Ï∞®Î°ú Ï≤úÏ≤úÌûà Î¨∏Ìôî Î™ÖÏÜå Ï¶êÍ∏∞Í∏∞.Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÏàôÏÜåÏóêÏÑú ÎäêÍ∏ãÌïòÍ≤å Ìú¥ÏãùÌïòÎ©∞, Ï∞®ÎÇò ÌÉùÏãúÎ°ú Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ Ï≤úÏ≤úÌûà Î∞©Î¨∏ÌïúÎã§.ÎπÑÏö©ÏùÑ Ï†àÏïΩÌïòÎ©¥ÏÑúÎèÑ ÍπäÏù¥ ÏûàÍ≤å Î¨∏Ìôî Ïó¨ÌñâÏùÑ Ï¶êÍ∏∞Î©∞ ÌûêÎßÅÌïòÎäî ÏïåÎú∞ ÌÉêÎ∞© Ïó¨ÌñâÏûê.";
                    break;
                case "OBRFT":
                    groupMBTIStyle = "ÎèôÏ†ÅÏù∏ ÌïòÎ£®! Î≤ÑÏä§ ÌÉÄÍ≥† ÎßõÏßëÏùÑ Îπ†Î•¥Í≤å Í≥µÎûµÌïúÎã§! ÏïºÏô∏ ÌôúÎèôÏùÑ Ï¶êÍ∏∞Î©∞, ÎåÄÏ§ëÍµêÌÜµÏùÑ ÌÉÄÍ≥† Í≥†Í∏â ÎßõÏßëÏùÑ Î∞îÏÅòÍ≤å ÎèåÏïÑÎã§ÎãåÎã§. ÎπÑÏö© Í±±Ï†ï ÏóÜÏù¥ Îã§ÏñëÌïú ÏùåÏãùÏùÑ Îπ†ÏßêÏóÜÏù¥ Í≤ΩÌóòÌïòÎ©∞, ÌïòÎ£® ÏùºÏ†ïÏù¥ Îπ°Îπ°Ìïú Ïï°Ìã∞Î∏å ÎØ∏Ïãù Ïó¨ÌñâÏûê.";
                    break;

                case "OBRFL":
                    groupMBTIStyle = "ÏïºÏô∏ ÌôúÎèô Ï¶êÍ∏∞Î©∞, Î≤ÑÏä§Î°ú Ïó¨Ïú†Î°≠Í≤å ÎØ∏Ïãù Ïó¨Ìñâ! Î∞îÍπ•ÏóêÏÑú ÌôúÎ∞úÌûà ÏõÄÏßÅÏù¥Í≥†, ÎåÄÏ§ëÍµêÌÜµÏúºÎ°ú ÎßõÏßëÏùÑ Ï≤úÏ≤úÌûà Ï∞æÏïÑÎã§ÎãåÎã§. ÎèàÏùÑ ÏïÑÎÅºÏßÄ ÏïäÍ≥† ÎßõÍ≥º Î∂ÑÏúÑÍ∏∞Î•º Ï§ëÏãúÌïòÎ©∞, ÎäêÍ∏ãÌïòÍ≤å Ïó¨ÌñâÏùÑ Ï¶êÍ∏∞Îäî Ïó¨Ïú†Î°úÏö¥ ÎØ∏ÏãùÍ∞Ä.";
                    break;

                case "OBRMT":
                    groupMBTIStyle = "ÌôúÎèôÏ†ÅÏù∏ ÌïòÎ£®! Î≤ÑÏä§Î°ú Î¨∏Ìôî ÌÉêÎ∞©ÏùÑ Îπ†Î•¥Í≤å ÏÜåÌôîÌïúÎã§! ÏïºÏô∏ ÌôúÎèôÏùÑ Ï¶êÍ∏∞Î©∞, ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìï¥ Í≥†Í∏â Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ Ïó¨Îü¨ Í≥≥ Î∞îÏÅòÍ≤å Î∞©Î¨∏ÌïúÎã§. ÎπÑÏö©ÏùÄ ÏïÑÎÅºÏßÄ ÏïäÍ≥†, ÏïåÏ∞¨ ÏùºÏ†ïÏúºÎ°ú Î¨∏ÌôîÏôÄ ÏòàÏà†ÏùÑ ÌíçÏÑ±ÌïòÍ≤å Í≤ΩÌóòÌïòÎäî ÌÉêÎ∞©Ìòï Ïó¨ÌñâÏûê.";
                    break;

                case "OBRML":
                    groupMBTIStyle = "ÏïºÏô∏ ÌôúÎèô Ï¶êÍ∏∞Î©∞, Î≤ÑÏä§Î°ú Ïó¨Ïú†Î°≠Í≤å Î¨∏Ìôî Î™ÖÏÜåÎ•º ÎëòÎü¨Î≥∏Îã§. Î∞îÍπ• ÌôúÎèôÏùÑ Ï¢ãÏïÑÌïòÍ≥†, ÎåÄÏ§ëÍµêÌÜµÏúºÎ°ú Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ Ï≤úÏ≤úÌûà Î∞©Î¨∏ÌïòÎ©∞ Ìú¥ÏãùÎèÑ Ï±ôÍ∏¥Îã§. ÎπÑÏö©ÏùÄ Ïã†Í≤Ω Ïì∞ÏßÄ ÏïäÍ≥†, ÍπäÏù¥ ÏûàÎäî Î¨∏Ìôî Ï≤¥ÌóòÍ≥º Ïó¨Ïú†Î°úÏö¥ ÌûêÎßÅ Ïó¨ÌñâÏùÑ Ï¶êÍ∏∞Îäî Ïä§ÌÉÄÏùº.";
                    break;

                case "OBEFT":
                    groupMBTIStyle = "ÏïºÏô∏ÏóêÏÑú ÌôúÎ∞úÌïòÍ≤å, Í∞ÄÏÑ±ÎπÑ ÎßõÏßëÏùÑ Îπ†Î•¥Í≤å Í≥µÎûµÌïúÎã§! Î∞îÍπ• ÌôúÎèôÏùÑ Ï¶êÍ∏∞Î©∞, ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìï¥ Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÎßõÏßëÏùÑ Îπ°Îπ°ÌïòÍ≤å Ïó¨Îü¨ Í≥≥ Î∞©Î¨∏ÌïúÎã§. ÎèàÏùÑ Ï†àÏïΩÌïòÎ©¥ÏÑúÎèÑ ÏµúÎåÄÌïú ÎßéÏùÄ ÎßõÏßëÏùÑ Í≤ΩÌóòÌïòÎäî ÏïåÎú∞ÌïòÍ≥† ÌôúÎèôÏ†ÅÏù∏ ÎØ∏Ïãù Ïó¨ÌñâÏûê.";
                    break;

                case "OBEFL":
                    groupMBTIStyle = "ÏïºÏô∏ ÌôúÎèô Ï¶êÍ∏∞Î©∞, Î≤ÑÏä§Î°ú Ïó¨Ïú†Î°≠Í≤å Í∞ÄÏÑ±ÎπÑ ÎßõÏßë ÌÉêÎ∞©! ÌôúÎèôÏ†ÅÏù∏ ÌïòÎ£®Î•º Î≥¥ÎÇ¥Î©¥ÏÑú, ÎåÄÏ§ëÍµêÌÜµÏúºÎ°ú Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÎßõÏßëÏùÑ ÎäêÍ∏ãÌïòÍ≤å Ï∞æÏïÑÎã§ÎãåÎã§. ÎπÑÏö©ÏùÑ ÏïÑÎÅºÎ©¥ÏÑúÎèÑ ÎßõÏûàÎäî ÏùåÏãùÍ≥º Ïó¨Ïú†Î°úÏö¥ Ïó¨ÌñâÏùÑ ÎèôÏãúÏóê Ï¶êÍ∏∞Îäî Ïã§ÏÜçÌåå ÎØ∏ÏãùÍ∞Ä.";
                    break;

                case "OBEMT":
                    groupMBTIStyle = "ÌôúÎèôÏ†ÅÏù∏ ÏïºÏô∏ ÏùºÏ†ï! Î≤ÑÏä§Î°ú Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ Î¨∏Ìôî ÌÉêÎ∞©ÏùÑ Îπ†Î•¥Í≤å! ÏïºÏô∏ ÌôúÎèôÏùÑ Ï¶êÍ∏∞Î©¥ÏÑú, ÎåÄÏ§ëÍµêÌÜµÏúºÎ°ú Ïó¨Îü¨ Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ Îπ†Î•¥Í≤å Î∞©Î¨∏ÌïúÎã§. ÎπÑÏö©ÏùÄ ÏïÑÎÅºÎ©¥ÏÑúÎèÑ ÌïòÎ£®Ïóê ÏµúÎåÄÌïú ÎßéÏùÄ Î¨∏Ìôî Î™ÖÏÜåÎ•º ÏïåÏ∞®Í≤å Í≤ΩÌóòÌïòÎäî Ïã§ÏÜçÌòï ÌÉêÎ∞© Ïó¨ÌñâÏûê.";
                    break;

                case "OBEML":
                    groupMBTIStyle = "ÏïºÏô∏ ÌôúÎèôÍ≥º Ïó¨Ïú†Î°úÏö¥ ÏùºÏ†ï, Î≤ÑÏä§Î°ú Ï≤úÏ≤úÌûà Î¨∏Ìôî ÌÉêÎ∞©! ÌôúÎèôÏ†ÅÏù∏ ÌïòÎ£®Î•º Î≥¥ÎÇ¥Î©¥ÏÑú, ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìï¥ Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ Î¨∏Ìôî Î™ÖÏÜåÎ•º Ïó¨Ïú†Î°≠Í≤å Î∞©Î¨∏ÌïúÎã§. ÎπÑÏö©ÏùÑ Ï†àÏïΩÌïòÎ©¥ÏÑúÎèÑ ÍπäÏù¥ ÏûàÎäî Î¨∏Ìôî Ï≤¥ÌóòÍ≥º Ìé∏ÏïàÌïú ÌûêÎßÅ Ïó¨ÌñâÏùÑ Ï¶êÍ∏∞Îäî ÏïåÎú∞ ÌÉêÎ∞©Í∞Ä.";
                    break;

                case "OCRFT":
                    groupMBTIStyle = "ÌôúÎèôÏ†ÅÏù∏ ÏïºÏô∏ ÏùºÏ†ï, Ï∞®Î°ú Îπ†Î•¥Í≤å Í≥†Í∏â ÎßõÏßëÏùÑ Í≥µÎûµÌïúÎã§! ÏïºÏô∏ ÌôúÎèôÏùÑ Ï¶êÍ∏∞Î©¥ÏÑú Ï∞®ÎÇò ÌÉùÏãúÎ•º ÌÉÄÍ≥† Í≥†Í∏â ÎßõÏßëÏùÑ Îπ°Îπ°ÌïòÍ≤å Ïó¨Îü¨ Í≥≥ Î∞©Î¨∏ÌïúÎã§. ÎπÑÏö©ÏùÑ ÏïÑÎÅºÏßÄ ÏïäÍ≥†, Îã§ÏñëÌïú ÎØ∏ÏãùÏùÑ Îπ†ÏßêÏóÜÏù¥ Ï¶êÍ∏∞Îäî Ïï°Ìã∞Î∏å ÎØ∏Ïãù Ïó¨ÌñâÏûê.";
                    break;

                case "OCRFL":
                    groupMBTIStyle = "ÏïºÏô∏ÏóêÏÑú Ïó¨Ïú†Î°≠Í≤å, Ï∞®Î°ú Í≥†Í∏â ÎßõÏßëÏùÑ Ï≤úÏ≤úÌûà Ï¶êÍ∏¥Îã§. ÌôúÎèôÏ†ÅÏù∏ ÌïòÎ£®Î•º Î≥¥ÎÇ¥Î©∞, Ï∞®ÎÇò ÌÉùÏãúÎ°ú Í≥†Í∏â ÎßõÏßëÏùÑ ÎäêÍ∏ãÌïòÍ≤å Ï∞æÏïÑÎã§ÎãåÎã§. ÎèàÏùÑ ÏïÑÎÅºÏßÄ ÏïäÍ≥†, ÌíàÍ≤© ÏûàÎäî ÎØ∏ÏãùÍ≥º Ìé∏ÏïàÌïú Ïó¨ÌñâÏùÑ ÎèôÏãúÏóê Ï¶êÍ∏∞Îäî Ïó¨Ïú†Ìåå ÎØ∏ÏãùÍ∞Ä.";
                    break;

                case "OCRMT":
                    groupMBTIStyle = "ÌôúÎèôÏ†ÅÏù∏ ÏïºÏô∏ ÏùºÏ†ï, Ï∞®Î°ú Í≥†Í∏â Î¨∏Ìôî ÌÉêÎ∞©ÏùÑ Îπ†Î•¥Í≤å! ÏïºÏô∏ ÌôúÎèôÏùÑ Ï¶êÍ∏∞Î©∞, Ï∞®ÎÇò ÌÉùÏãúÎ°ú Ïó¨Îü¨ Í≥†Í∏â Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ Î∞îÏÅòÍ≤å Î∞©Î¨∏ÌïúÎã§. ÎπÑÏö©ÏùÄ ÏïÑÎÅºÏßÄ ÏïäÍ≥†, ÏïåÏ∞¨ ÏùºÏ†ïÏúºÎ°ú Î¨∏ÌôîÏôÄ ÏòàÏà†ÏùÑ ÌíçÏÑ±ÌïòÍ≤å Í≤ΩÌóòÌïòÎäî ÌÉêÎ∞©Ìòï Ïó¨ÌñâÏûê.";
                    break;

                case "OCRML":
                    groupMBTIStyle = "ÏïºÏô∏ÏóêÏÑú Ïó¨Ïú†Î°≠Í≤å, Ï∞®Î°ú Í≥†Í∏â Î¨∏Ìôî Î™ÖÏÜåÎ•º Ï≤úÏ≤úÌûà! ÌôúÎèôÏ†ÅÏù∏ ÌïòÎ£®Î•º Î≥¥ÎÇ¥Î©∞, Ï∞®ÎÇò ÌÉùÏãúÎ°ú Í≥†Í∏â Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ ÎäêÍ∏ãÌïòÍ≤å Î∞©Î¨∏ÌïúÎã§. ÎπÑÏö©ÏùÄ Ïã†Í≤Ω Ïì∞ÏßÄ ÏïäÍ≥†, ÍπäÏù¥ ÏûàÎäî Î¨∏Ìôî Ï≤¥ÌóòÍ≥º Ìé∏ÏïàÌïú ÌûêÎßÅ Ïó¨ÌñâÏùÑ Ï¶êÍ∏∞Îäî Ïä§ÌÉÄÏùº.";
                    break;

                case "OCEFT":
                    groupMBTIStyle = "ÏïºÏô∏ ÌôúÎèô Ï¶êÍ∏∞Î©∞, Ï∞®Î°ú Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÎßõÏßëÏùÑ Îπ†Î•¥Í≤å Í≥µÎûµÌïúÎã§! ÌôúÎèôÏ†ÅÏù∏ ÌïòÎ£®Î•º Î≥¥ÎÇ¥Î©¥ÏÑú, Ï∞®ÎÇò ÌÉùÏãúÎ°ú Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÎßõÏßëÏùÑ Îπ°Îπ°ÌïòÍ≤å Ïó¨Îü¨ Í≥≥ Î∞©Î¨∏ÌïúÎã§. ÎèàÏùÑ ÏïÑÎÅºÎ©¥ÏÑúÎèÑ ÏµúÎåÄÌïú ÎßéÏùÄ ÎßõÏßëÏùÑ Í≤ΩÌóòÌïòÎäî ÏïåÎú∞ÌïòÍ≥† ÌôúÎèôÏ†ÅÏù∏ ÎØ∏Ïãù Ïó¨ÌñâÏûê.";
                    break;

                case "OCEFL":
                    groupMBTIStyle = "ÏïºÏô∏ ÌôúÎèôÍ≥º Ìï®Íªò, Ï∞®Î°ú Ïó¨Ïú†Î°≠Í≤å Í∞ÄÏÑ±ÎπÑ ÎßõÏßëÏùÑ Ï¶êÍ∏¥Îã§. ÌôúÎèôÏ†ÅÏù∏ ÏùºÏ†ï ÏÜçÏóêÏÑúÎèÑ Ï∞®ÎÇò ÌÉùÏãúÎ°ú Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ ÎßõÏßëÏùÑ Ï≤úÏ≤úÌûà Ï∞æÏïÑÎã§ÎãåÎã§. ÎπÑÏö©ÏùÑ Ï†àÏïΩÌïòÎ©¥ÏÑúÎèÑ ÎßõÏûàÎäî ÏùåÏãùÍ≥º Ìé∏ÏïàÌïú Ïó¨ÌñâÏùÑ Ï°∞ÌôîÎ°≠Í≤å Ï¶êÍ∏∞Îäî Ïã§ÏÜçÌåå ÎØ∏ÏãùÍ∞Ä.";
                    break;

                case "OCEMT":
                    groupMBTIStyle = "ÏïºÏô∏ ÌôúÎèôÌïòÎ©∞, Ï∞®Î°ú Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ Î¨∏Ìôî ÌÉêÎ∞©ÏùÑ Îπ†Î•¥Í≤å! ÌôúÎèôÏ†ÅÏù∏ ÌïòÎ£®Î•º Î≥¥ÎÇ¥Î©¥ÏÑú, Ï∞®ÎÇò ÌÉùÏãúÎ°ú Ïó¨Îü¨ Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ Îπ†Î•¥Í≤å Î∞©Î¨∏ÌïúÎã§. ÎπÑÏö©ÏùÑ ÏïÑÎÅºÎ©¥ÏÑúÎèÑ ÌïòÎ£®Ïóê ÏµúÎåÄÌïú ÎßéÏùÄ Î¨∏Ìôî Î™ÖÏÜåÎ•º ÏïåÏ∞®Í≤å Í≤ΩÌóòÌïòÎäî Ïã§ÏÜçÌòï ÌÉêÎ∞© Ïó¨ÌñâÏûê.";
                    break;

                case "OCEML":
                    groupMBTIStyle = "ÏïºÏô∏ ÌôúÎèô Ï¶êÍ∏∞Î©∞, Ï∞®Î°ú Ïó¨Ïú†Î°≠Í≤å Í∞ÄÏÑ±ÎπÑ Î¨∏Ìôî Ï≤¥Ìóò! ÌôúÎèôÏ†ÅÏù∏ ÏùºÏ†ï Ï§ëÏóêÎèÑ Ï∞®ÎÇò ÌÉùÏãúÎ°ú Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ ÎäêÍ∏ãÌïòÍ≤å Î∞©Î¨∏ÌïúÎã§. ÎπÑÏö© Ï†àÏïΩÍ≥º Ìé∏ÏïàÌïú Ïó¨ÌñâÏùÑ Ï§ëÏãúÌïòÎ©∞, ÍπäÏù¥ ÏûàÎäî Î¨∏Ìôî ÌÉêÎ∞©ÏùÑ Ï¶êÍ∏∞Îäî ÏïåÎú∞ ÌÉêÎ∞©Í∞Ä.";
                    break;

                default:
                    groupMBTIStyle = "Ïù¥ Ïú†ÌòïÏùÄ ÏïÑÏßÅ Ï†ïÏùòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.";
                    break;
            }
            // GPT API ÌîÑÎ°¨ÌîÑÌä∏ Îã§Ïãú ÌïòÍ∏∞
            // GPT ÌîÑÎ°¨ÌîÑÌä∏
            StringBuilder prompt = new StringBuilder();
            prompt.append("ÎÑàÎäî Ïú†Î™ÖÌïú Ïó¨Ìñâ Í≥ÑÌöç Ï†ÑÎ¨∏Í∞ÄÏïº.");
            prompt.append("ÎÇòÎäî ").append(startDate).append("Î∂ÄÌÑ∞ ").append(endDate).append("ÍπåÏßÄ Ïó¨ÌñâÏùÑ Í∞Ä.\n");
            prompt.append("Ïû•ÏÜåÎäî ").append(location).append("Ïïº.");
            prompt.append("ÏàôÏÜåÎäî ").append(placeToStay).append("Ïóê ÏûàÏñ¥. ÏàôÏÜå ÏúÑÏπòÎ•º Ï§ëÏã¨ÏúºÎ°ú Î∞òÍ≤Ω 20kmÍπåÏßÄÎßå,ÎèôÏÑ†ÏùÑ Í≥†Î†§Ìï¥ÏÑú ÏßúÏ§ò.\n");
            prompt.append("ÎßåÏïΩ Íº≠ Í∞ÄÍ≥† Ïã∂ÏùÄ Ïû•ÏÜåÍ∞Ä Î∞òÍ≤Ω 20kmÎ•º ÎÑòÎäîÎã§Î©¥, Í∑∏ ÎÇ†Ïùò ÏùºÏ†ïÏùÄ Íº≠ Í∞ÄÍ≥† Ïã∂ÏùÄ Ïû•ÏÜå Ï£ºÎ≥ÄÏúºÎ°ú ÎèôÏÑ†ÏùÑ ÏßúÏ§ò.");
            prompt.append("Ïó¨Ìñâ Ïä§ÌÉÄÏùºÏùÄ ").append(groupMBTI).append("Ïù¥Í≥† ").append("Ïù¥ Ïä§ÌÉÄÏùºÏùÄ ").append(groupMBTIStyle).append("Ïù¥ÎùºÍ≥† Ìï† Ïàò ÏûàÏñ¥.");
            prompt.append("Ïó¨Ìñâ Ïä§ÌÉÄÏùºÏùÑ ÌÜµÌï¥ Ïïå Ïàò ÏûàÎäî ÏÑ†Ìò∏ÌïòÎäî ÍµêÌÜµ ÏàòÎã®ÏùÑ Ï§ëÏã¨ÏúºÎ°ú ÏßúÏ§ò");
            prompt.append(who).append("ÏôÄ(Í≥º) Ìï®Íªò Í∞Ä\n");

            if (!travelData.isEmpty()) {
                List<String> places = new ArrayList<>();
                for (Map.Entry<String, Object> entry : travelData.entrySet()) {
                    // "place_"Î°ú ÏãúÏûëÌïòÎäî ÌÇ§Îßå ÌïÑÌÑ∞ÎßÅ
                    if (entry.getKey().startsWith("place_") && entry.getValue() instanceof String) {
                        String place = ((String) entry.getValue()).trim();
                        if (!place.isEmpty()) {
                            places.add(place);
                        }
                    }
                }
                prompt.append("Íº≠ Í∞ÄÏïº ÌïòÎäî Ïû•ÏÜåÎäî ").append(String.join(", ", places)).append(" Ïù¥Ïïº.\n");
            }
            prompt.append("ÏïÑÎûòÏôÄ Í∞ôÏùÄ JSON Î∞∞Ïó¥ ÌòïÏãùÏúºÎ°ú ÏùëÎãµÌï¥Ï§ò. Ï†ÑÎ∂Ä ÌïúÍµ≠Ïñ¥Î°ú Ï∂úÎ†•Ìï¥Ï£ºÍ≥† ÏÑ§Î™ÖÏùÄ Ï†àÎåÄ ÌïòÏßÄ ÎßêÍ≥† JSON Îç∞Ïù¥ÌÑ∞Îßå Î∞òÌôòÌï¥. ÌòïÏãùÏùÄ Îã§ÏùåÍ≥º Í∞ôÏïÑ:\n\n");

            prompt.append("[\n");
            prompt.append("  {\n");
            prompt.append("    \"date\": \"YYYY.MM.DD\",\n");
            prompt.append("    \"places\": [\n");
            prompt.append("      {\n");
            prompt.append("        \"place\": \"Ïû•ÏÜå Ïù¥Î¶Ñ\",\n");
            prompt.append("        \"coord\": \"ÏúÑÎèÑ,Í≤ΩÎèÑ\",\n");
            prompt.append("        \"category\": \"Í¥ÄÍ¥ëÏßÄ, ÏùåÏãùÏ†ê, Ïπ¥Ìéò Îì±\",\n");
            prompt.append("        \"transport\": \"ÎèÑÎ≥¥, ÌÉùÏãú, Î≤ÑÏä§ Îì±\",\n");
            prompt.append("        \"time\": \"Ïù¥Ï†Ñ Ïû•ÏÜåÏóêÏÑú Ìï¥Îãπ Ïû•ÏÜåÎ•º Í∞ÄÎäîÎç∞ ÏòàÏÉÅ Ïù¥Îèô ÏãúÍ∞Ñ\",\n");
            prompt.append("         \"supply\" : \"Ìï¥Îãπ Ïû•ÏÜåÏóêÏÑú Íº≠ ÌïÑÏöîÌïú Ï§ÄÎπÑÎ¨º\"");
            prompt.append("      }\n");
            prompt.append("    ]\n");
            prompt.append("  }\n");
            prompt.append("]\n");


            prompt.append("Ïù¥Îü∞ ÌòïÏãùÏúºÎ°ú ÌïòÎ£®ÌïòÎ£®Î•º ÎÇòÎà†ÏÑú JSON Î∞∞Ïó¥Î°ú Íµ¨ÏÑ±Ìï¥ÏÑú Ï§ò. ÏòàÏãú ÎßêÍ≥† ÏßÑÏßú Îç∞Ïù¥ÌÑ∞Î•º ÎÑ£Ïñ¥ÏÑú ÎÇ†ÏßúÎ≥ÑÎ°ú Ïû•ÏÜåÎ•º ÎÑ£Ïñ¥Ï§ò.\n");
            prompt.append("ÎßåÏïΩ").append(groupMBTI).append("Ïùò Îß® ÎßàÏßÄÎßâÏù¥ TÏù∏ Í≤ΩÏö∞Ïóî ÌïòÎ£®Ïóê 7Í≥≥Ïùò ÏùºÏ†ïÏùÑ ÏßúÏ£ºÍ≥†, LÏù∏ Í≤ΩÏö∞Ïóî ÌïòÎ£®Ïóê 3Í≥≥Ïùò ÏùºÏ†ïÏùÑ ÏßúÏ§ò.");
            prompt.append("ÏãùÏÇ¨Îäî ÌïòÎ£® Ï†ÅÏñ¥ÎèÑ 2Í≥≥Ïù¥ Ìè¨Ìï®ÎêòÏñ¥Ïïº ÌïòÍ≥†, Ïπ¥ÌéòÎäî Ïó¨Ìñâ Ïä§ÌÉÄÏùº ÏÑ§Î™ÖÏóê Îî∞Îùº ÎÑ£Ïñ¥Ï§ò. Í∑∏Î¶¨Í≥† Î™®Îì† Í∞ÄÍ≤åÎäî Ïã§Ï†úÎ°ú Ï°¥Ïû¨Ìï¥ÏïºÎèº.\n");
            prompt.append("Í∑∏Î¶¨Í≥† Ï†ÑÏóê Í∞îÎçò Ïû•ÏÜåÎ•º Îòê Í∞ÄÎäî Í±¥ ÏõêÌïòÏßÄ ÏïäÏïÑ.");
            prompt.append("Í∑∏Î¶¨Í≥† Ìï¥Îãπ Ïû•ÏÜåÏóêÏÑú Ï∂îÏ≤úÌïòÎäî Ï§ÄÎπÑÎ¨ºÎèÑ ÏïåÎ†§Ï§ò. ÌïÑÏöî ÏóÜÎäî Í≤ΩÏö∞Ïóî nullÏúºÎ°ú ÏïåÎ†§Ï§òÎèÑ Îèº. ÏòàÎ•º Îì§ÏûêÎ©¥ ÌïúÎùºÏÇ∞ÏùÑ Î∞©Î¨∏ÌïòÍ∏∞ ÏúÑÌï¥ÏÑúÎäî Îì±ÏÇ∞Ìôî, Ìé∏Ìïú Ïò∑Ïù¥ ÌïÑÏöîÌïòÎãà supplyÏóê {Îì±ÏÇ∞Ìôî, Ìé∏ÌïúÏò∑}ÏùÑ ÎÑ£Ïñ¥Ï£ºÎ©¥ ÎêòÍ≥† Ïπ¥ÌéòÏ≤òÎüº Ï§ÄÎπÑÎ¨ºÏù¥ ÏóÜÎäî Í≤ΩÏö∞ null Í∞íÏùÑ ÎÑ£Ïñ¥Ï§ò.");
            prompt.append("Íº≠ Î∞©Î¨∏Ìï¥Ïïº ÌïòÎäî Ïû•ÏÜåÎäî ÌïòÎ£®Ïóê Î™®Îëê ÎÑ£ÏùÑ ÌïÑÏöîÎäî ÏóÜÏñ¥. \n");
            prompt.append("Í∑∏Î¶¨Í≥† ÏàôÎ∞ïÏãúÏÑ§ÏùÄ ÎÇ¥ ÏàôÏÜå Ïô∏ÏóêÎäî Ï†àÎåÄ ÎÑ£Ïñ¥Ï£ºÏßÄÎßà.");
            prompt.append("Í∑∏Î¶¨Í≥† ÎßàÏßÄÎßâÏùÄ Ï†àÎåÄ 'Ïù¥ÏÉÅÏûÖÎãàÎã§' Í∞ôÏùÄ Îßê ÏóÜÏù¥ JSONÎßå Î∞òÌôòÌïòÍ≥† Î¨¥Ï°∞Í±¥ ÌïúÍ∏ÄÎ°úÎßå ÎãµÌï¥Ï§ò.");

            loadingLayout.setVisibility(View.VISIBLE);
            ApiService apiService = ApiClient.getRetrofit().create(ApiService.class);

            List<GptRequest.Message> messages = new ArrayList<>();
            messages.add(new GptRequest.Message("user", prompt.toString()));

            GptRequest gptRequest = new GptRequest("gpt-4o-mini", messages);

            // ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞Î•º JSON ÌòïÏãùÏúºÎ°ú Î°úÍ∑∏Ïóê Ï∂úÎ†•
            Log.d("GPT", "Sending Request: " + new Gson().toJson(gptRequest));

            // GPT ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞
            apiService.getGptAnswer(gptRequest).enqueue(new retrofit2.Callback<GptResponse>() {
                @Override
                public void onResponse(Call<GptResponse> call, retrofit2.Response<GptResponse> response) {
                    if (response.isSuccessful() && response.body() != null) {
                        loadingLayout.setVisibility(View.GONE);
                        String gptReply = response.body().choices.get(0).message.content;
                        Log.d("GPT", "GPT Reply: " + gptReply);

                        // GPT ÏùëÎãµÏùÑ GptTripPlanActivityÎ°ú ÎÑòÍ∏∞Í∏∞
                        Intent intent = new Intent(AddTripActivity.this, GptTripPlanActivity.class);
                        intent.putExtra("groupMBTIstyle",groupMBTIStyle);
                        intent.putExtra("travelName", travelName);
                        intent.putExtra("travelId",travelId);
                        intent.putExtra("travelData", (Serializable) travelData);
                        intent.putExtra("gpt_schedule", gptReply);
                        intent.putExtra("teamId",teamId);
                        startActivity(intent);
                    } else {
                        Log.e("GPT", "Response error: " + response.code());
                        if (response.errorBody() != null) {
                            try {
                                String errorResponse = response.errorBody().string();
                                Log.e("GPT", "Error body: " + errorResponse);
                            } catch (IOException e) {
                                Log.e("GPT", "Error reading error body", e);
                            }
                        }
                        Toast.makeText(AddTripActivity.this, "GPT ÏùëÎãµ Ïã§Ìå®", Toast.LENGTH_SHORT).show();
                    }

                }

                @Override
                public void onFailure(Call<GptResponse> call, Throwable t) {
                    loadingLayout.setVisibility(View.GONE);
                    Toast.makeText(AddTripActivity.this, "GPT Ìò∏Ï∂ú ÏóêÎü¨", Toast.LENGTH_SHORT).show();
                    Log.e("GPT", "ÏóêÎü¨: " + t.getMessage());
                }
            });
        });
    }

    // Ïû•ÏÜåÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å ÏÑ†ÌÉù
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_CODE_LOCATION && resultCode == RESULT_OK && data != null) {
            String selectedLocation = data.getStringExtra("selected_location");
            String selectedAccomodation = data.getStringExtra("selected_accomodation");
            if (selectedLocation != null) {
                binding.locationInput.setText(selectedLocation);
            }
            if (selectedAccomodation != null) {
                binding.placeToStayInput.setText(selectedAccomodation);
            }
        }
    }
}