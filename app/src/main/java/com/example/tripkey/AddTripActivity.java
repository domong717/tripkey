package com.example.tripkey;

import android.app.DatePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.util.TypedValue;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.example.tripkey.databinding.ActivityAddTripBinding;
import com.example.tripkey.network.ApiClient;
import com.example.tripkey.PlaceInfo;
import com.example.tripkey.network.ApiService;
import com.example.tripkey.network.GptRequest;
import com.example.tripkey.network.GptResponse;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.gson.Gson;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import retrofit2.Call;

public class AddTripActivity extends AppCompatActivity {

    private ActivityAddTripBinding binding;
    private LinearLayout mustVisitContainer;
    private TextView startDateInput, endDateInput, currentMBTI;
    private String selectedWho = "";
    private String selectedStyle = "";
    private String teamId;
    private static final String TAG = "AddTripActivity";
    private static final int REQUEST_CODE_LOCATION = 1001;
    private LinearLayout loadingLayout;
    private List<PlaceInfo> cafeFoodList = new ArrayList<>();
    private String seletedFriendsIds;
    private double accommodationLatitude = 37.5665;   // Í∏∞Î≥∏Í∞í
    private double accommodationLongitude = 126.9780; // Í∏∞Î≥∏Í∞í
    private boolean OneDay = false; // ÎãπÏùºÏπòÍ∏∞

    private ActivityResultLauncher<Intent> mbtiResultLauncher;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityAddTripBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        loadingLayout = findViewById(R.id.loading_layout);

        teamId = getIntent().getStringExtra("teamId");

        String suggestedDestination = getIntent().getStringExtra("suggestedDestination");
        if (suggestedDestination != null) {
            EditText destinationInput = findViewById(R.id.location_input); // ÏòàÏãú id
            destinationInput.setText(suggestedDestination);
        }

        // ÏÑ†ÌÉùÎêú ÏπúÍµ¨Îì§Ïùò ID Î¶¨Ïä§Ìä∏ Î∞õÍ∏∞
        ArrayList<String> selectedFriendsIds = getIntent().getStringArrayListExtra("selectedFriendsIds");
        if (selectedFriendsIds != null) {
            Log.d(TAG, "ÏÑ†ÌÉùÎêú ÏπúÍµ¨ ID Î¶¨Ïä§Ìä∏: " + selectedFriendsIds);
            calculateGroupMBTI(selectedFriendsIds, teamMBTI -> currentMBTI.setText(teamMBTI));
        }

        EditText travelNameInput = binding.travelNameInput;
        EditText locationInput = binding.locationInput;
        EditText placeToStayInput = binding.placeToStayInput;
        startDateInput = binding.startDateInput;
        endDateInput = binding.endDateInput;
        currentMBTI = binding.currentMbtiText;


        Button whoAloneButton = binding.whoAloneButton;
        Button whoCoupleButton = binding.whoCoupleButton;
        Button whoFriendButton = binding.whoFriendButton;
        Button whoFamilyButton = binding.whoFamilyButton;
        Button whoChildButton = binding.whoChildButton;
        Button whoPetButton = binding.whoPetButton;

        Button styleKeepButton = binding.styleKeepButton;
        Button styleAnalyzeButton = binding.styleAnalyzeButton;

        mustVisitContainer = findViewById(R.id.must_visit_container);
        ImageButton addPlaceButton = findViewById(R.id.add_place_button);
        addPlaceButton.setOnClickListener(v -> addNewPlaceField());

        // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÏÑ§Ï†ï
        ImageButton backButton = findViewById(R.id.button_back);
        backButton.setOnClickListener(v -> finish());


        // Ïû•ÏÜå
        ImageButton searchLocationBtn = binding.locationSearchButton;
        searchLocationBtn.setOnClickListener(v -> {
            Intent intent = new Intent(this, LocationSearchActivity.class);
            intent.putExtra("result_type", "location");
            startActivityForResult(intent, REQUEST_CODE_LOCATION);
        });

        // Ïû•ÏÜå
        ImageButton searchAccomodationBtn = binding.accomodationSearchButton;
        searchAccomodationBtn.setOnClickListener(v -> {
            Intent intent = new Intent(this, AccomodationSearchActivity.class);
            intent.putExtra("result_type", "accommodation");
            startActivityForResult(intent, REQUEST_CODE_LOCATION);
        });

        startDateInput.setOnClickListener(v -> showDatePickerDialog(true));
        endDateInput.setOnClickListener(v -> showDatePickerDialog(false));

        whoAloneButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoChildButton, whoPetButton);
            whoAloneButton.setBackgroundResource(R.drawable.green_button);
            selectedWho = "ÌòºÏûê";
        });

        whoCoupleButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoChildButton, whoPetButton);
            whoCoupleButton.setBackgroundResource(R.drawable.green_button);
            selectedWho = "Ïó∞Ïù∏";
        });

        whoFriendButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoChildButton, whoPetButton);
            whoFriendButton.setBackgroundResource(R.drawable.green_button);
            selectedWho = "ÏπúÍµ¨";
        });
        whoFamilyButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoChildButton, whoPetButton);
            whoFamilyButton.setBackgroundResource(R.drawable.green_button);
            selectedWho = "Í∞ÄÏ°±";
        });

        whoChildButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoChildButton, whoPetButton);
            whoChildButton.setBackgroundResource(R.drawable.green_button);
            selectedWho = "ÏïÑÏù¥";
        });

        whoPetButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoChildButton, whoPetButton);
            whoPetButton.setBackgroundResource(R.drawable.green_button);
            selectedWho = "Î∞òÎ†§ÎèôÎ¨º";
        });


        styleKeepButton.setOnClickListener(v -> {
            resetStyleButtons(styleKeepButton, styleAnalyzeButton);
            styleKeepButton.setBackgroundResource(R.drawable.green_button);
            selectedStyle = "Ïú†ÏßÄ";
        });

        mbtiResultLauncher = registerForActivityResult(
                new ActivityResultContracts.StartActivityForResult(),
                result -> {
                    if (result.getResultCode() == RESULT_OK) {
                        Intent data = result.getData();
                        if (data != null) {
                            String newMBTI = data.getStringExtra("mbti_result");
                            if (newMBTI != null) {
                                TextView currentMBTIText = findViewById(R.id.current_mbti_text);
                                currentMBTIText.setText(newMBTI);
                            }
                        }
                    }
                });

        styleAnalyzeButton.setOnClickListener(v -> {
            resetStyleButtons(styleKeepButton, styleAnalyzeButton);
            styleAnalyzeButton.setBackgroundResource(R.drawable.green_button);
            selectedStyle = "Îã§Ïãú Î∂ÑÏÑù";

            // ReMBTITestActivityÎ°ú Ïù¥Îèô
            Intent intent = new Intent(this, ReMBTITestActivity.class);
            mbtiResultLauncher.launch(intent);
        });



    }


    private void resetWhoButtons(Button whoAloneButton, Button whoCoupleButton, Button whoFriendButton, Button whoFamilyButton, Button whoParentButton, Button whoChildButton) {
        whoAloneButton.setBackgroundResource(R.drawable.gray_box_full);
        whoCoupleButton.setBackgroundResource(R.drawable.gray_box_full);
        whoFriendButton.setBackgroundResource(R.drawable.gray_box_full);
        whoFamilyButton.setBackgroundResource(R.drawable.gray_box_full);
        whoParentButton.setBackgroundResource(R.drawable.gray_box_full);
        whoChildButton.setBackgroundResource(R.drawable.gray_box_full);

    }

    private void resetStyleButtons(Button styleKeepButton, Button styleAnalyzeButton) {
        styleKeepButton.setBackgroundResource(R.drawable.gray_box_full);
        styleAnalyzeButton.setBackgroundResource(R.drawable.gray_box_full);
    }

    private void addNewPlaceField() {
        LinearLayout newFieldLayout = new LinearLayout(this);
        newFieldLayout.setOrientation(LinearLayout.HORIZONTAL);
        newFieldLayout.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
        ));

        EditText newPlaceField = new EditText(this);
        newPlaceField.setLayoutParams(new LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                1
        ));
        newPlaceField.setHint("Ïû•ÏÜå ÏûÖÎ†•");

        // üîç ÎèãÎ≥¥Í∏∞(Í≤ÄÏÉâ) Î≤ÑÌäº Ï∂îÍ∞Ä
        ImageButton searchButton = new ImageButton(this);
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 36, getResources().getDisplayMetrics()),
                (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 36, getResources().getDisplayMetrics())
        );
        searchButton.setLayoutParams(params);
        searchButton.setImageResource(R.drawable.search);
        searchButton.setBackgroundColor(Color.TRANSPARENT);
        searchButton.setScaleType(ImageView.ScaleType.FIT_CENTER);
        searchButton.setPadding(4, 4, 4, 4);

        ImageButton deleteButton = new ImageButton(this);
        deleteButton.setImageResource(R.drawable.delete);
        deleteButton.setBackground(null);
        deleteButton.setOnClickListener(v -> mustVisitContainer.removeView(newFieldLayout));

        // üîç Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
        searchButton.setOnClickListener(v -> {
            // Ïû•ÏÜå Í≤ÄÏÉâ Ïï°Ìã∞ÎπÑÌã∞ Ìò∏Ï∂ú (requestCodeÎ•º ÎèôÏ†ÅÏúºÎ°ú Í¥ÄÎ¶¨Ìï¥Ïïº Ìï®)
            Intent intent = new Intent(this, PlaceSearchActivity.class);

            int fieldIndex = mustVisitContainer.indexOfChild(newFieldLayout);
            intent.putExtra("result_type", "must_visit");
            intent.putExtra("field_index", fieldIndex);
            startActivityForResult(intent, REQUEST_CODE_LOCATION);
        });

        newFieldLayout.addView(newPlaceField);
        newFieldLayout.addView(searchButton);  // ‚Üê ÎèãÎ≥¥Í∏∞ Î≤ÑÌäº Ï∂îÍ∞Ä
        newFieldLayout.addView(deleteButton);

        mustVisitContainer.addView(newFieldLayout);
    }

    private void showDatePickerDialog(boolean isStartDate) {
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);

        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this,
                (view, selectedYear, selectedMonth, selectedDayOfMonth) -> {
                    String formattedMonth = String.format("%02d", selectedMonth + 1);
                    String formattedDay = String.format("%02d", selectedDayOfMonth);
                    String selectedDate = selectedYear + "-" + formattedMonth + "-" + formattedDay;

                    if (isStartDate) {
                        startDateInput.setText(selectedDate);
                        OneDay = false; // ÏãúÏûë ÎÇ†Ïßú ÏÑ†ÌÉù Ïãú Ï¥àÍ∏∞Ìôî
                    } else {
                        String startDateText = startDateInput.getText().toString();
                        if (!startDateText.isEmpty()) {
                            String[] startDateParts = startDateText.split("-");
                            int startYear = Integer.parseInt(startDateParts[0]);
                            int startMonth = Integer.parseInt(startDateParts[1]);
                            int startDay = Integer.parseInt(startDateParts[2]);

                            // ÏÑ†ÌÉùÌïú ÎÇ†ÏßúÍ∞Ä startDateÎ≥¥Îã§ Ïù¥Ï†ÑÏù∏ÏßÄ ÌôïÏù∏
                            if (selectedYear < startYear ||
                                    (selectedYear == startYear && selectedMonth + 1 < startMonth) ||
                                    (selectedYear == startYear && selectedMonth + 1 == startMonth && selectedDayOfMonth < startDay)) {
                                Toast.makeText(this, "Ï¢ÖÎ£å ÎÇ†ÏßúÎäî ÏãúÏûë ÎÇ†Ïßú Ïù¥ÌõÑÏó¨Ïïº Ìï©ÎãàÎã§.", Toast.LENGTH_SHORT).show();
                                return;
                            }

                            // ÎãπÏùºÏπòÍ∏∞ Ïó¨Î∂Ä ÌôïÏù∏
                            if (selectedYear == startYear &&
                                    (selectedMonth + 1) == startMonth &&
                                    selectedDayOfMonth == startDay) {
                                OneDay = true;
                            } else {
                                OneDay = false;
                            }
                        }

                        endDateInput.setText(selectedDate);
                    }
                },
                year, month, dayOfMonth
        );

        // endDate ÏÑ†ÌÉù Ïãú, startDate Ïù¥ÌõÑ ÎÇ†ÏßúÎßå Í∞ÄÎä•ÌïòÎèÑÎ°ù Ï†úÌïú
        if (!isStartDate) {
            String startDateText = startDateInput.getText().toString();
            if (!startDateText.isEmpty()) {
                String[] startDateParts = startDateText.split("-");
                int startYear = Integer.parseInt(startDateParts[0]);
                int startMonth = Integer.parseInt(startDateParts[1]) - 1; // CalendarÏóêÏÑú 0Î∂ÄÌÑ∞ ÏãúÏûë
                int startDay = Integer.parseInt(startDateParts[2]);

                Calendar minDate = Calendar.getInstance();
                minDate.set(startYear, startMonth, startDay);
                datePickerDialog.getDatePicker().setMinDate(minDate.getTimeInMillis());
            }
        }

        datePickerDialog.show();
    }


    private void calculateGroupMBTI(ArrayList<String> selectedFriendsIds, OnMBTICalculatedListener listener) {
        SharedPreferences sharedPreferences = getSharedPreferences("UserPrefs", Context.MODE_PRIVATE);
        String userId = sharedPreferences.getString("userId", null);
        if (userId == null) {
            Toast.makeText(this, "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
            return;
        }

        FirebaseFirestore db = FirebaseFirestore.getInstance();
        final String[] currentUserMBTI = new String[1]; // üí° final Î∞∞Ïó¥Î°ú ÎûòÌïë

        db.collection("users").document(userId).get()
                .addOnSuccessListener(documentSnapshot -> {
                    currentUserMBTI[0] = documentSnapshot.getString("mbti");
                    if (currentUserMBTI[0] == null || currentUserMBTI[0].length() != 5) {
                        currentUserMBTI[0] = "Î∂ÑÏÑùÌïÑÏöî"; // fallback
                    }

                    Map<Character, Integer> mbtiCount = new HashMap<>();
                    int[] processedCount = {0};
                    int totalCount = selectedFriendsIds.size();

                    for (String friendId : selectedFriendsIds) {
                        db.collection("users").document(friendId).get()
                                .addOnSuccessListener(friendSnapshot -> {
                                    if (friendSnapshot.exists() && friendSnapshot.contains("mbti")) {
                                        String mbti = friendSnapshot.getString("mbti");
                                        if (mbti != null && mbti.length() == 5) {
                                            for (char c : mbti.toCharArray()) {
                                                mbtiCount.put(c, mbtiCount.getOrDefault(c, 0) + 1);
                                            }
                                        }
                                    }
                                    processedCount[0]++;
                                    if (processedCount[0] == totalCount) {
                                        listener.onMBTICalculated(determineGroupMBTI(mbtiCount, currentUserMBTI[0]));
                                    }
                                })
                                .addOnFailureListener(e -> {
                                    processedCount[0]++;
                                    if (processedCount[0] == totalCount) {
                                        listener.onMBTICalculated(determineGroupMBTI(mbtiCount, currentUserMBTI[0]));
                                    }
                                });
                    }
                });
    }


    private String determineGroupMBTI(Map<Character, Integer> mbtiCount, String currentUserMBTI) {
        char[] mbtiPositions = {'I', 'O', 'B', 'C', 'R', 'E', 'M', 'F', 'T', 'L'};
        StringBuilder groupMBTI = new StringBuilder();

        for (int i = 0; i < 5; i++) {
            char first = mbtiPositions[i * 2];
            char second = mbtiPositions[i * 2 + 1];

            int countFirst = mbtiCount.getOrDefault(first, 0);
            int countSecond = mbtiCount.getOrDefault(second, 0);

            if (countFirst > countSecond) {
                groupMBTI.append(first);
            } else if (countFirst < countSecond) {
                groupMBTI.append(second);
            } else {
                // Í∞ôÏùÑ Í≤ΩÏö∞ ÌòÑÏû¨ Ïú†Ï†ÄÏùò MBTIÏóêÏÑú Ìï¥Îãπ ÏúÑÏπòÏùò Í∞í ÏÇ¨Ïö©
                groupMBTI.append(currentUserMBTI.charAt(i));
            }
        }

        return groupMBTI.toString();
    }


    private interface OnMBTICalculatedListener {
        void onMBTICalculated(String teamMBTI);
    }

    private boolean hasAtLeastOneMustVisit() {
        for (int i = 0; i < mustVisitContainer.getChildCount(); i++) {
            View child = mustVisitContainer.getChildAt(i);
            if (child instanceof LinearLayout) {
                LinearLayout layout = (LinearLayout) child;
                for (int j = 0; j < layout.getChildCount(); j++) {
                    View subChild = layout.getChildAt(j);
                    if (subChild instanceof EditText) {
                        EditText editText = (EditText) subChild;
                        if (!editText.getText().toString().trim().isEmpty()) {
                            return true;  // Ïú†Ìö®Ìïú Ïû•ÏÜå 1Í∞ú Ïù¥ÏÉÅ ÏûàÏùå
                        }
                    }
                }
            }
        }
        return false;  // ÏûÖÎ†•Îêú Ïû•ÏÜå ÏóÜÏùå
    }


    private void saveTripData() {
        String travelName = binding.travelNameInput.getText().toString().trim();
        String location = binding.locationInput.getText().toString().trim();
        String placeToStay = binding.placeToStayInput.getText().toString().trim();
        String startDate = startDateInput.getText().toString().trim();
        String endDate = endDateInput.getText().toString().trim();
        String groupMBTI = currentMBTI.getText().toString().trim();
        String who = selectedWho;
        int mustCount = mustVisitContainer.getChildCount();

        Log.d("OneDay", "MustCount: " + mustCount);
        Log.d("OneDay", "ÎãπÏùºÏπòÍ∏∞" + OneDay);
        Log.d("GPTsend", "Latitude: " + accommodationLatitude + ", Longitude: " + accommodationLongitude);
        // Í∏∞Î≥∏ ÌïÑÏàò Ìï≠Î™© Í≤ÄÏÇ¨
        if (travelName.isEmpty() || location.isEmpty() || startDate.isEmpty() || endDate.isEmpty() || selectedWho.isEmpty() || selectedStyle.isEmpty()) {
            Toast.makeText(this, "Î™®Îì† Ìï≠Î™©ÏùÑ Ï±ÑÏõåÏ£ºÏÑ∏Ïöî!", Toast.LENGTH_SHORT).show();
            return;
        }

        // ÎãπÏùºÏπòÍ∏∞Ïùº Í≤ΩÏö∞ ÌïÑÏàò Ï°∞Í±¥ Í≤ÄÏÇ¨
        if (OneDay) {
            if (!hasAtLeastOneMustVisit()) {
                Toast.makeText(this, "ÎãπÏùºÏπòÍ∏∞ Ïó¨ÌñâÏùÄ Î∞òÎìúÏãú Î∞©Î¨∏ Ïû•ÏÜåÎ•º 1Í∞ú Ïù¥ÏÉÅ Ï∂îÍ∞ÄÌï¥Ïïº Ìï©ÎãàÎã§.", Toast.LENGTH_SHORT).show();
                return;
            }
        }
        else {
            // ÏùºÎ∞ò Ïó¨ÌñâÏùº Í≤ΩÏö∞ ÏàôÏÜåÎèÑ ÌïÑÏàò
            if (placeToStay.isEmpty()) {
                Toast.makeText(this, "ÏàôÏÜå Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show();
                return;
            }
        }

        SharedPreferences sharedPreferences = getSharedPreferences("UserPrefs", Context.MODE_PRIVATE);
        String userId = sharedPreferences.getString("userId", null);
        if (userId == null) {
            Toast.makeText(this, "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
            return;
        }

        ArrayList<String> selectedFriendsIds = getIntent().getStringArrayListExtra("selectedFriendsIds");

        calculateGroupMBTI(selectedFriendsIds, teamMBTI -> {

            FirebaseFirestore db = FirebaseFirestore.getInstance();
            String travelId = db.collection("users").document(userId)
                    .collection("travel").document().getId();

            Map<String, Object> travelData = new HashMap<>();
            travelData.put("travelId", travelId); // ÏπúÍµ¨ Ï™ΩÏóêÎèÑ travelId ÎèôÏùºÌïòÍ≤å Ï†ÄÏû•
            travelData.put("travelName", travelName);
            travelData.put("location", location);
            travelData.put("startDate", startDate);
            travelData.put("endDate", endDate);
            travelData.put("who", selectedWho);
            travelData.put("travelStyle", selectedStyle);
            travelData.put("teamMBTI", teamMBTI);
            travelData.put("teamId", teamId);
            travelData.put("creatorId", userId); // ÎàÑÍ∞Ä ÎßåÎì† Ïó¨ÌñâÏù∏ÏßÄ Î™ÖÏãú
            travelData.put("placeToStay", placeToStay);
            travelData.put("selectedFriendsIds", selectedFriendsIds);


            for (int i = 0; i < mustVisitContainer.getChildCount(); i++) {
                View child = mustVisitContainer.getChildAt(i);
                if (child instanceof LinearLayout) {
                    EditText placeInput = (EditText) ((LinearLayout) child).getChildAt(0);
                    String place = placeInput.getText().toString().trim();
                    if (!place.isEmpty()) {
                        travelData.put("place_" + i, place);
                    }
                }
            }

            // Ïó¨Ìñâ MBTIÏóê ÎßûÎäî Ïä§ÌÉÄÏùº ÏÑ§Î™Ö
            final String groupMBTIStyle;
            groupMBTIStyle = getGroupMBTIStyle(groupMBTI);

            // GPT API ÌîÑÎ°¨ÌîÑÌä∏ Îã§Ïãú ÌïòÍ∏∞
            // GPT ÌîÑÎ°¨ÌîÑÌä∏
            StringBuilder prompt = new StringBuilder();
            prompt.append("Ïó¨ÌñâÏùÑ Í≥ÑÌöçÌï¥Ï§ò.");
            prompt.append("Ïó¨ÌñâÍ∏∞Í∞Ñ :").append(startDate).append("~").append(endDate);
            prompt.append("Ïû•ÏÜå : ").append(location);
            prompt.append("ÏàôÏÜå Ïù¥Î¶Ñ, ÏúÑÎèÑ, Í≤ΩÎèÑ: ").append(placeToStay).append(accommodationLatitude).append(accommodationLongitude).append("ÏàôÏÜå Ï§ëÏã¨ÏúºÎ°ú Î∞òÍ≤Ω 20kmÏùò Ïû•ÏÜåÎì§Î°ú Ïó¨Ìñâ ÏÉùÏÑ±. ÎèôÏÑ†ÏùÑ Í≥†Î†§ÌïòÎäî Í≤å Í∞ÄÏû• Ï§ëÏöî.\n");
            prompt.append("Ïó¨Ìñâ Ïä§ÌÉÄÏùº: ").append(groupMBTIStyle);
            prompt.append("Ïó¨Ìñâ Ïä§ÌÉÄÏùºÏùÑ Î¨¥Ï°∞Í±¥ Î∞òÏòÅÌïòÏó¨ ÎèôÏÑ†Ïù¥ Ï¢ãÏùÄ ÏùºÏ†ï ÏÉùÏÑ±ÌïòÎäî Í≤ÉÏù¥ ÌïµÏã¨.");
            prompt.append(who).append("ÏôÄ(Í≥º) Ìï®Íªò Ïó¨Ìñâ\n").append("Ï∂îÏ≤ú Ïû•ÏÜåÏóê Íº≠ Î∞òÏòÅÌï† Í≤É. ÏïÑÏù¥ÏôÄÏùº Í≤ΩÏö∞ ÌÇ§Ï¶àÏπ¥Ìéò Ìè¨Ìï®");

            if (!travelData.isEmpty()) {
                List<String> places = new ArrayList<>();
                for (Map.Entry<String, Object> entry : travelData.entrySet()) {
                    // "place_"Î°ú ÏãúÏûëÌïòÎäî ÌÇ§Îßå ÌïÑÌÑ∞ÎßÅ
                    if (entry.getKey().startsWith("place_") && entry.getValue() instanceof String) {
                        String place = ((String) entry.getValue()).trim();
                        if (!place.isEmpty()) {
                            places.add(place);
                        }
                    }
                }
                prompt.append("Íº≠ Í∞ÄÏïº ÌïòÎäî Ïû•ÏÜå: ").append(String.join(", ", places));
                prompt.append("Íº≠ Í∞ÄÍ≥† Ïã∂ÏùÄ Ïû•ÏÜåÍ∞Ä Î∞òÍ≤Ω 20kmÎ•º ÎÑòÎäîÎã§Î©¥, Í∑∏ ÎÇ†Ïùò ÏùºÏ†ïÏùÄ Íº≠ Í∞ÄÍ≥† Ïã∂ÏùÄ Ïû•ÏÜå Ï£ºÎ≥ÄÏúºÎ°ú ÎèôÏÑ† ÏÉùÏÑ±");
            }
            prompt.append("ÏïÑÎûòÏôÄ Í∞ôÏùÄ JSON Î∞∞Ïó¥ ÌòïÏãùÏúºÎ°ú ÏùëÎãµ ÌïÑÏàò. Ï†ÑÎ∂Ä ÌïúÍµ≠Ïñ¥Î°ú Ï∂úÎ†• ÌïÑÏàò. ÏÑ§Î™ÖÏùÄ Ï†àÎåÄ ÏóÜÏù¥ JSON Îç∞Ïù¥ÌÑ∞Îßå Î∞òÌôò ÌïÑÏàò. ÌòïÏãù :\n\n");

            prompt.append("[\n");
            prompt.append("  {\n");
            prompt.append("    \"date\": \"YYYY.MM.DD\",\n");
            prompt.append("    \"places\": [\n");
            prompt.append("      {\n");
            prompt.append("        \"place\": \"Ïû•ÏÜå Ïù¥Î¶Ñ\",\n");
            prompt.append("        \"coord\": \"ÏúÑÎèÑ,Í≤ΩÎèÑ\",\n");
            prompt.append("        \"category\": \"Í¥ÄÍ¥ëÏßÄ, ÏùåÏãùÏ†ê, Ïπ¥Ìéò Îì±\",\n");
            prompt.append("        \"transport\": \"ÎèÑÎ≥¥, ÌÉùÏãú, Î≤ÑÏä§ Îì±\",\n");
            prompt.append("         \"supply\" : \"Ìï¥Îãπ Ïû•ÏÜåÏóêÏÑú Íº≠ ÌïÑÏöîÌïú Ï§ÄÎπÑÎ¨º\"");
            prompt.append("      }\n");
            prompt.append("    ]\n");
            prompt.append("  }\n");
            prompt.append("]\n");


            prompt.append("ÌïòÎ£®ÌïòÎ£®Î•º ÎÇòÎà†ÏÑú JSON Î∞∞Ïó¥Î°ú Íµ¨ÏÑ±. ÏßÑÏßú Îç∞Ïù¥ÌÑ∞Î•º ÎÑ£Ïñ¥ÏÑú ÎÇ†ÏßúÎ≥ÑÎ°ú Ïû•ÏÜå ÏÉùÏÑ±.\n");
            if (cafeFoodList != null && !cafeFoodList.isEmpty()) {
                Log.d("GPTActivity", "cafefoodlist: " + cafeFoodList);

                // ÎÇ¥Í∞Ä ÎßåÎì† Ìï®ÏàòÎ°ú cafeFoodList -> Î¨∏ÏûêÏó¥ Î≥ÄÌôò
                String placeListStr = convertPlaceListToString(cafeFoodList);

                prompt.append("Ïπ¥Ìéò Î∞è ÏùåÏãùÏ†ê Ï∂îÏ≤ú Î¶¨Ïä§Ìä∏: \n")
                        .append(placeListStr)
                        .append("\n");
            }
            prompt.append(teamMBTI).append("Ïóê I ÏûàÏúºÎ©¥ ÏáºÌïëÎ™∞, Î∞ïÎ¨ºÍ¥Ä, Ïã§ÎÇ¥ ÏúÑÏ£º Ï∂îÏ≤ú, OÏûàÏúºÎ©¥ ÏûêÏó∞Í≤ΩÍ¥Ä, ÏïºÏô∏, Î∞îÎã§ÏôÄ Í∞ôÏùÄ ÏïºÏô∏ ÏúÑÏ£º Ï∂îÏ≤ú");
            prompt.append("ÏãùÏÇ¨/Ïπ¥Ìéò Ï†úÏô∏ Í¥ÄÍ¥ëÏßÄÏôÄ ÏáºÌïëÎ™∞, ÏûêÏó∞Í≤ΩÍ¥Ä Îì±ÏùÑ Ï∂îÏ≤úÌïòÏó¨ ÏùºÏ†ïÏóê Ï∂îÍ∞Ä ÌïÑÏàò\n");
            prompt.append(teamMBTI).append("Ïóê F ÏûàÏúºÎ©¥ ÎÇ†ÎßàÎã§ Ïπ¥Ìéò 2Í≥≥ Ï∂îÍ∞Ä, M ÏûàÏúºÎ©¥ Ïπ¥ÌéòÏù¥Î¶Ñ ÎÑòÍ∏∞Í∏∞ Ï†àÎåÄ Í∏àÏßÄ.");
            prompt.append("ÏãùÏÇ¨Îäî ÎÇ†ÎßàÎã§ 2Í≥≥ Ï∂îÍ∞Ä.\n");
            prompt.append("Ï§ëÎ≥µ Ïû•ÏÜå Ï∂îÏ≤ú Í∏àÏßÄ");
            prompt.append("Ìï¥Îãπ Ïû•ÏÜåÏóêÏÑú Ï∂îÏ≤úÌïòÎäî Ï§ÄÎπÑÎ¨ºÎèÑ ÏïåÎ†§Ï§ò. ÌïÑÏöî ÏóÜÎäî Í≤ΩÏö∞Ïóî nullÏúºÎ°ú ÏïåÎ†§Ï§òÎèÑ Îèº. ÏòàÎ•º Îì§ÏûêÎ©¥ ÌïúÎùºÏÇ∞ÏùÑ Î∞©Î¨∏ÌïòÍ∏∞ ÏúÑÌï¥ÏÑúÎäî Îì±ÏÇ∞Ìôî, Ìé∏Ìïú Ïò∑Ïù¥ ÌïÑÏöîÌïòÎãà supplyÏóê {Îì±ÏÇ∞Ìôî, Ìé∏ÌïúÏò∑}ÏùÑ ÎÑ£Ïñ¥Ï£ºÎ©¥ ÎêòÍ≥† Ïπ¥ÌéòÏ≤òÎüº Ï§ÄÎπÑÎ¨ºÏù¥ ÏóÜÎäî Í≤ΩÏö∞ null Í∞íÏùÑ ÎÑ£Ïñ¥Ï§ò.");
            prompt.append("Íº≠ Î∞©Î¨∏Ìï¥Ïïº ÌïòÎäî Ïû•ÏÜåÎäî ÌïòÎ£®Ïóê Î™®Îëê ÎÑ£ÏùÑ ÌïÑÏöîÎäî ÏóÜÏñ¥. \n");
            prompt.append("ÏàôÏÜå Ï∂îÏ≤ú Ï†àÎåÄ Í∏àÏßÄ");
            prompt.append("Ï†àÎåÄ 'Ïù¥ÏÉÅÏûÖÎãàÎã§' Îßê ÏóÜÏù¥ ÌòïÏãù Í∑∏ÎåÄÎ°úÏùò JSONÎßå Î∞òÌôòÌï†Í≤É. Î¨¥Ï°∞Í±¥ ÌïúÍ∏ÄÎ°úÎßå ÎåÄÎãµ ÌïÑÏàò.");

            loadingLayout.setVisibility(View.VISIBLE);
            ApiService apiService = ApiClient.getRetrofit().create(ApiService.class);

            List<GptRequest.Message> messages = new ArrayList<>();
            messages.add(new GptRequest.Message("user", prompt.toString()));

            GptRequest gptRequest = new GptRequest("gpt-4o-mini", messages);

            // ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞Î•º JSON ÌòïÏãùÏúºÎ°ú Î°úÍ∑∏Ïóê Ï∂úÎ†•
            Log.d("GPT", "Sending Request: " + new Gson().toJson(gptRequest));

            // GPT ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞
            apiService.getGptAnswer(gptRequest).enqueue(new retrofit2.Callback<GptResponse>() {
                @Override
                public void onResponse(Call<GptResponse> call, retrofit2.Response<GptResponse> response) {
                    if (response.isSuccessful() && response.body() != null) {
                        loadingLayout.setVisibility(View.GONE);
                        String gptReply = response.body().choices.get(0).message.content;
                        Log.d("GPT", "GPT Reply: " + gptReply);

                        // GPT ÏùëÎãµÏùÑ GptTripPlanActivityÎ°ú ÎÑòÍ∏∞Í∏∞
                        Intent intent = new Intent(AddTripActivity.this, GptTripPlanActivity.class);
                        intent.putExtra("groupMBTIstyle", groupMBTIStyle);
                        intent.putExtra("travelName", travelName);
                        intent.putExtra("travelId", travelId);
                        intent.putExtra("travelData", (Serializable) travelData);
                        intent.putExtra("gpt_schedule", gptReply);
                        intent.putExtra("teamId", teamId);
                        intent.putExtra("startDate", startDate);
                        intent.putExtra("endDate", endDate);
                        intent.putExtra("selectedFriendsIds", selectedFriendsIds);
                        intent.putExtra("accommodation_latitude", accommodationLatitude);
                        intent.putExtra("accommodation_longitude", accommodationLongitude);
                        Log.d("GPTsend", "Latitude: " + accommodationLatitude + ", Longitude: " + accommodationLongitude);
                        startActivity(intent);
                    } else {
                        Log.e("GPT", "Response error: " + response.code());
                        if (response.errorBody() != null) {
                            try {
                                String errorResponse = response.errorBody().string();
                                Log.e("GPT", "Error body: " + errorResponse);
                            } catch (IOException e) {
                                Log.e("GPT", "Error reading error body", e);
                            }
                        }
                        Toast.makeText(AddTripActivity.this, "GPT ÏùëÎãµ Ïã§Ìå®", Toast.LENGTH_SHORT).show();
                    }

                }

                @Override
                public void onFailure(Call<GptResponse> call, Throwable t) {
                    loadingLayout.setVisibility(View.GONE);
                    Toast.makeText(AddTripActivity.this, "GPT Ìò∏Ï∂ú ÏóêÎü¨", Toast.LENGTH_SHORT).show();
                    Log.e("GPT", "ÏóêÎü¨: " + t.getMessage());
                }
            });
        });
    }

    private void searchPlacesFromKakaoByCategory(String categoryCode, double longitude, double latitude, int radius) {
        Log.d("KakaoMap", "SearchPlacesFromKakaoByCategory called");
        KakaoApiService apiService = KakaoApiClient.getRetrofitInstance().create(KakaoApiService.class);
        String authorization = "KakaoAK " + "42d61720c6096d7a9ec5e7c8d0950740";

        Log.d("KakaoMap", "Authorization: " + authorization);

        Call<KakaoSearchResponse> call = apiService.searchPlacesByCategory(authorization, categoryCode, longitude, latitude, radius, 15);

        call.enqueue(new retrofit2.Callback<KakaoSearchResponse>() {
            @Override
            public void onResponse(Call<KakaoSearchResponse> call, retrofit2.Response<KakaoSearchResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    List<KakaoSearchResponse.Document> places = response.body().documents;
                    for (KakaoSearchResponse.Document place : places) {
                        String placeName = place.place_name;
                        double lat = Double.parseDouble(place.y);
                        double lng = Double.parseDouble(place.x);

                        String category;
                        if ("FD6".equals(place.category_group_code)) {
                            category = "ÏùåÏãùÏ†ê";
                        } else if ("CE7".equals(place.category_group_code)) {
                            category = "Ïπ¥Ìéò";
                        } else {
                            category = "Í∏∞ÌÉÄ";
                        }

                        PlaceInfo placeInfo = new PlaceInfo(placeName, lat, lng, category);
                        cafeFoodList.add(placeInfo);

                        Log.d("GPTActivity", "Ïπ¥Ìéò/ÏùåÏãùÏ†ê: " + cafeFoodList);
                        Log.d("KakaoMap", "Ïû•ÏÜå Ïù¥Î¶Ñ: " + placeName + ", ÏúÑÎèÑ: " + lat + ", Í≤ΩÎèÑ: " + lng + ", Ïπ¥ÌÖåÍ≥†Î¶¨: " + category);
                    }

                } else {
                    Log.e("KakaoMap", "ÏùëÎãµ Ïã§Ìå®: " + response.code());
                }
            }

            @Override
            public void onFailure(Call<KakaoSearchResponse> call, Throwable t) {
                Log.e("KakaoMap", "ÏöîÏ≤≠ Ïã§Ìå®: " + t.getMessage());
            }
        });
    }


    private String getGroupMBTIStyle(String groupMBTI) {
        if (groupMBTI.length() != 5) return "Ïù¥ Ïú†ÌòïÏùÄ ÏïÑÏßÅ Ï†ïÏùòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.";

        // 1,2 Í∏ÄÏûê: Ïã§ÎÇ¥ vs ÏïºÏô∏, ÍµêÌÜµÏàòÎã®
        String firstTwo = groupMBTI.substring(0, 2);
        String indoorOutdoor = firstTwo.charAt(0) == 'I' || firstTwo.charAt(0) == 'B' || firstTwo.charAt(0) == 'C' || firstTwo.charAt(0) == 'E' ? "Ïã§ÎÇ¥Î•º ÏÑ†Ìò∏" : "ÏïºÏô∏ÌôúÎèôÏùÑ ÏÑ†Ìò∏";
        String transport = (firstTwo.charAt(1) == 'B' || firstTwo.charAt(1) == 'E') ? "ÎåÄÏ§ëÍµêÌÜµÏúºÎ°ú Ïù¥Îèô" : "ÌÉùÏãúÎÇò Ï∞®Î•º Ïù¥Ïö©";

        // 3 Í∏ÄÏûê: Ïû¨Ï†ï
        char finance = groupMBTI.charAt(2);
        String financeDesc = (finance == 'R') ? "Ïó¨Ïú†Î°úÏö¥ Ïû¨Ï†ï" : "Ï°∞Í∏à Ï†ÅÏùÄ Ïû¨Ï†ïÏù¥Îùº Í∞ÄÏÑ±ÎπÑ ÏÑ†Ìò∏";

        // 4 Í∏ÄÏûê: ÏùåÏãù Ï∑®Ìñ•
        char food = groupMBTI.charAt(3);
        String foodDesc = (food == 'F') ? "ÎØ∏ÏãùÍ∞ÄÎùºÏÑú ÏùåÏãù Ï§ëÏöî" : "ÏùåÏãùÎ≥¥Îã§ ÏáºÌïëÎ™∞, ÏûêÏó∞Í≤ΩÍ¥Ä, Î∞ïÎ¨ºÍ¥Ä Í¥ÄÎûåÏù¥ Ï§ëÏöî";

        // 5 Í∏ÄÏûê: ÏùºÏ†ï Í∞úÏàò
        char scheduleCount = groupMBTI.charAt(4);
        String scheduleDesc = (scheduleCount == 'T') ? "ÏùºÏ†ïÏùÄ 8Í∞ú" : (scheduleCount == 'L') ? "ÏùºÏ†ïÏùÄ Îî± 4Í∞ú" : "";

        return String.format("%s, %s, %s, %s, %s", indoorOutdoor, transport, financeDesc, foodDesc, scheduleDesc);
    }

    // PlaceInfo Î¶¨Ïä§Ìä∏Î•º Î∞õÏïÑÏÑú Í∞Å Ïû•ÏÜå Ï†ïÎ≥¥Î•º Î¨∏ÏûêÏó¥Î°ú Ìï©Ï≥ê Î∞òÌôòÌïòÎäî Ìï®Ïàò ÏòàÏãú
    private String convertPlaceListToString(List<PlaceInfo> placeList) {
        if (placeList == null || placeList.isEmpty()) {
            return "Ïû•ÏÜå Î¶¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.";
        }

        StringBuilder sb = new StringBuilder();

        for (PlaceInfo place : placeList) {
            sb.append("Ïù¥Î¶Ñ: ").append(place.getName()).append(", ");
            sb.append("Ïπ¥ÌÖåÍ≥†Î¶¨: ").append(place.getCategory()).append("\n");
        }

        return sb.toString();
    }


    // Ïû•ÏÜåÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å ÏÑ†ÌÉù
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == REQUEST_CODE_LOCATION && resultCode == RESULT_OK && data != null) {
            String resultType = data.getStringExtra("result_type");

            switch (resultType) {
                case "location": {
                    String selectedLocation = data.getStringExtra("selected_location");
                    if (selectedLocation != null) {
                        binding.locationInput.setText(selectedLocation);
                    }
                    break;
                }
                case "accommodation": {
                    String selectedAccomodation = data.getStringExtra("selected_accomodation");
                    if (selectedAccomodation != null) {
                        binding.placeToStayInput.setText(selectedAccomodation);
                    }

                    if (data.hasExtra("latitude") && data.hasExtra("longitude")) {
                        accommodationLatitude = data.getDoubleExtra("latitude", 37.5665);
                        accommodationLongitude = data.getDoubleExtra("longitude", 126.9780);
                        Log.d("AddTripActivity", "ÏàôÏÜå ÏúÑÎèÑ: " + accommodationLatitude + ", Í≤ΩÎèÑ: " + accommodationLongitude);
                    }
                    Log.d("AddTripActivity", "ÏàôÏÜå ÏúÑÎèÑ: " + accommodationLatitude + ", Í≤ΩÎèÑ: " + accommodationLongitude);
                    break;
                }
                case "must_visit": {
                    int fieldIndex = data.getIntExtra("field_index", -1);
                    String selectedPlace = data.getStringExtra("selected_place_name");

                    if (fieldIndex >= 0 && selectedPlace != null &&
                            fieldIndex < mustVisitContainer.getChildCount()) {

                        View child = mustVisitContainer.getChildAt(fieldIndex);
                        if (child instanceof LinearLayout) {
                            EditText placeInput = (EditText) ((LinearLayout) child).getChildAt(0);
                            placeInput.setText(selectedPlace);
                        }
                    }
                    Log.d("DEBUG", "fieldIndex: " + fieldIndex + ", selectedPlace: " + selectedPlace);
                    Log.d("DEBUg", "data.hasExtra" + data.hasExtra("latitude") + ", " + data.hasExtra("longitude"));
                    if (OneDay) {
                        if (fieldIndex == 1 && data.hasExtra("latitude") && data.hasExtra("longitude")) {
                            accommodationLatitude = data.getDoubleExtra("latitude", 37.5665);
                            accommodationLongitude = data.getDoubleExtra("longitude", 126.9780);
                            Log.d("AddTripActivity", "ÎãπÏùºÏπòÍ∏∞: ÏàôÏÜå ÎåÄÏã† Ï≤´ Ïû•ÏÜå ÏúÑÎèÑ: " + accommodationLatitude + ", Í≤ΩÎèÑ: " + accommodationLongitude);
                        }
                    }
                    break;
                }
            }
        }

        binding.aiScheduleButton.setOnClickListener(v -> {
            int radius = 19999; // 20km Î∞òÍ≤Ω

            Log.d("GPTActivity", "Í∏∞Ï§Ä ÏúÑÎèÑÍ≤ΩÎèÑ" + accommodationLatitude + "," + accommodationLongitude);
            searchPlacesFromKakaoByCategory("FD6", accommodationLongitude, accommodationLatitude, radius);
            searchPlacesFromKakaoByCategory("CE7", accommodationLongitude, accommodationLatitude, radius);

            Log.d("GPTActivity", "Ïπ¥Ìéò/ÏùåÏãùÏ†ê: " + cafeFoodList);
            saveTripData();
        });
    }
}