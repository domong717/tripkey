package com.example.tripkey;

import android.app.DatePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.example.tripkey.databinding.ActivityAddTripBinding;
import com.example.tripkey.network.ApiClient;
import com.example.tripkey.network.ApiService;
import com.example.tripkey.network.GptRequest;
import com.example.tripkey.network.GptResponse;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.gson.Gson;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import retrofit2.Call;

public class AddTripActivity extends AppCompatActivity {

    private ActivityAddTripBinding binding;
    private LinearLayout mustVisitContainer;
    private TextView startDateInput, endDateInput, currentMBTI;
    private String selectedWho = "";
    private String selectedStyle = "";
    private String teamId;
    private static final String TAG = "AddTripActivity";
    private static final int REQUEST_CODE_LOCATION = 1001;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityAddTripBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        teamId = getIntent().getStringExtra("teamId");

        // ÏÑ†ÌÉùÎêú ÏπúÍµ¨Îì§Ïùò ID Î¶¨Ïä§Ìä∏ Î∞õÍ∏∞
        ArrayList<String> selectedFriendsIds = getIntent().getStringArrayListExtra("selectedFriendsIds");
        if (selectedFriendsIds != null) {
            Log.d(TAG, "ÏÑ†ÌÉùÎêú ÏπúÍµ¨ ID Î¶¨Ïä§Ìä∏: " + selectedFriendsIds);
            calculateGroupMBTI(selectedFriendsIds, teamMBTI -> currentMBTI.setText(teamMBTI));
        }

        EditText travelNameInput = binding.travelNameInput;
        EditText locationInput = binding.locationInput;
        EditText placeToStayInput = binding.placeToStayInput;
        startDateInput = binding.startDateInput;
        endDateInput = binding.endDateInput;
        currentMBTI = binding.currentMbtiText;


        Button whoAloneButton = binding.whoAloneButton;
        Button whoCoupleButton = binding.whoCoupleButton;
        Button whoFriendButton = binding.whoFriendButton;
        Button whoFamilyButton = binding.whoFamilyButton;
        Button whoCoworkerButton = binding.whoCoworkerButton;
        Button whoPetButton = binding.whoPetButton;

        Button styleKeepButton = binding.styleKeepButton;
        Button styleAnalyzeButton = binding.styleAnalyzeButton;

        mustVisitContainer = findViewById(R.id.must_visit_container);
        ImageButton addPlaceButton = findViewById(R.id.add_place_button);
        addPlaceButton.setOnClickListener(v -> addNewPlaceField());

        // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÏÑ§Ï†ï
        ImageButton backButton = findViewById(R.id.button_back);
        backButton.setOnClickListener(v -> finish());


        // Ïû•ÏÜå
        ImageButton searchLocationBtn = binding.locationSearchButton;
        searchLocationBtn.setOnClickListener(v -> {
            Intent intent = new Intent(this, LocationSearchActivity.class);
            startActivityForResult(intent, REQUEST_CODE_LOCATION);
        });


        startDateInput.setOnClickListener(v -> showDatePickerDialog(true));
        endDateInput.setOnClickListener(v -> showDatePickerDialog(false));

        whoAloneButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoAloneButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="ÌòºÏûê";
        });

        whoCoupleButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoCoupleButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="Ïó∞Ïù∏";
        });

        whoFriendButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoFriendButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="ÏπúÍµ¨";
        });
        whoFamilyButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoFamilyButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="Í∞ÄÏ°±";
        });

        whoCoworkerButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoCoworkerButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="ÎèôÎ£å";
        });

        whoPetButton.setOnClickListener(v -> {
            resetWhoButtons(whoAloneButton, whoCoupleButton, whoFriendButton, whoFamilyButton, whoCoworkerButton, whoPetButton);
            whoPetButton.setBackgroundResource(R.drawable.green_button);
            selectedWho="Î∞òÎ†§ÎèôÎ¨º";
        });


        styleKeepButton.setOnClickListener(v -> {
            resetStyleButtons(styleKeepButton, styleAnalyzeButton);
            styleKeepButton.setBackgroundResource(R.drawable.green_button);
            selectedStyle = "Ïú†ÏßÄ";
        });

        styleAnalyzeButton.setOnClickListener(v -> {
            resetStyleButtons(styleKeepButton, styleAnalyzeButton);
            styleAnalyzeButton.setBackgroundResource(R.drawable.green_button);
            selectedStyle = "Îã§Ïãú Î∂ÑÏÑù";

            // üîΩ MBTITestActivityÎ°ú Ïù¥Îèô
            Intent intent = new Intent(this, MBTITestActivity.class);
            startActivity(intent);
        });

        binding.aiScheduleButton.setOnClickListener(v -> saveTripData());
    }

private void resetWhoButtons(Button whoAloneButton, Button whoCoupleButton, Button whoFriendButton,Button whoFamilyButton, Button whoParentButton, Button whoChildButton) {
    whoAloneButton.setBackgroundResource(R.drawable.gray_box_full);
    whoCoupleButton.setBackgroundResource(R.drawable.gray_box_full);
    whoFriendButton.setBackgroundResource(R.drawable.gray_box_full);
    whoFamilyButton.setBackgroundResource(R.drawable.gray_box_full);
    whoParentButton.setBackgroundResource(R.drawable.gray_box_full);
    whoChildButton.setBackgroundResource(R.drawable.gray_box_full);

}

private void resetStyleButtons(Button styleKeepButton, Button styleAnalyzeButton) {
    styleKeepButton.setBackgroundResource(R.drawable.gray_box_full);
    styleAnalyzeButton.setBackgroundResource(R.drawable.gray_box_full);
}
    private void addNewPlaceField() {
        LinearLayout newFieldLayout = new LinearLayout(this);
        newFieldLayout.setOrientation(LinearLayout.HORIZONTAL);
        newFieldLayout.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
        ));

        EditText newPlaceField = new EditText(this);
        newPlaceField.setLayoutParams(new LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                1
        ));
        newPlaceField.setHint("Ïû•ÏÜå ÏûÖÎ†•");

        ImageButton deleteButton = new ImageButton(this);
        deleteButton.setImageResource(R.drawable.delete);
        deleteButton.setBackground(null);
        deleteButton.setOnClickListener(v -> mustVisitContainer.removeView(newFieldLayout));

        newFieldLayout.addView(newPlaceField);
        newFieldLayout.addView(deleteButton);

        mustVisitContainer.addView(newFieldLayout);
    }

    private void showDatePickerDialog(boolean isStartDate) {
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);

        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this,
                (view, selectedYear, selectedMonth, selectedDayOfMonth) -> {
                    String formattedMonth = String.format("%02d", selectedMonth + 1);
                    String formattedDay = String.format("%02d", selectedDayOfMonth);

                    String selectedDate = selectedYear + "-" + formattedMonth + "-" + formattedDay;
                    if (isStartDate) {
                        startDateInput.setText(selectedDate);
                    } else {
                        endDateInput.setText(selectedDate);
                    }
                },
                year, month, dayOfMonth
        );

        datePickerDialog.show();
    }
    private void calculateGroupMBTI(ArrayList<String> selectedFriendsIds, OnMBTICalculatedListener listener) {
        SharedPreferences sharedPreferences = getSharedPreferences("UserPrefs", Context.MODE_PRIVATE);
        String userId = sharedPreferences.getString("userId", null);
        if (userId == null) {
            Toast.makeText(this, "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
            return;
        }

        FirebaseFirestore db = FirebaseFirestore.getInstance();
        final String[] currentUserMBTI = new String[1]; // üí° final Î∞∞Ïó¥Î°ú ÎûòÌïë

        db.collection("users").document(userId).get()
                .addOnSuccessListener(documentSnapshot -> {
                    currentUserMBTI[0] = documentSnapshot.getString("mbti");
                    if (currentUserMBTI[0] == null || currentUserMBTI[0].length() != 4) {
                        currentUserMBTI[0] = "INFP"; // fallback
                    }

                    Map<Character, Integer> mbtiCount = new HashMap<>();
                    int[] processedCount = {0};
                    int totalCount = selectedFriendsIds.size();

                    for (String friendId : selectedFriendsIds) {
                        db.collection("users").document(friendId).get()
                                .addOnSuccessListener(friendSnapshot -> {
                                    if (friendSnapshot.exists() && friendSnapshot.contains("mbti")) {
                                        String mbti = friendSnapshot.getString("mbti");
                                        if (mbti != null && mbti.length() == 4) {
                                            for (char c : mbti.toCharArray()) {
                                                mbtiCount.put(c, mbtiCount.getOrDefault(c, 0) + 1);
                                            }
                                        }
                                    }
                                    processedCount[0]++;
                                    if (processedCount[0] == totalCount) {
                                        listener.onMBTICalculated(determineGroupMBTI(mbtiCount, currentUserMBTI[0]));
                                    }
                                })
                                .addOnFailureListener(e -> {
                                    processedCount[0]++;
                                    if (processedCount[0] == totalCount) {
                                        listener.onMBTICalculated(determineGroupMBTI(mbtiCount, currentUserMBTI[0]));
                                    }
                                });
                    }
                });
    }



    private String determineGroupMBTI(Map<Character, Integer> mbtiCount, String currentUserMBTI) {
        char[] mbtiPositions = {'I', 'O', 'B', 'T', 'L', 'S', 'M', 'F'};
        StringBuilder groupMBTI = new StringBuilder();

        for (int i = 0; i < 4; i++) {
            char first = mbtiPositions[i * 2];
            char second = mbtiPositions[i * 2 + 1];

            int countFirst = mbtiCount.getOrDefault(first, 0);
            int countSecond = mbtiCount.getOrDefault(second, 0);

            if (countFirst > countSecond) {
                groupMBTI.append(first);
            } else if (countFirst < countSecond) {
                groupMBTI.append(second);
            } else {
                // Í∞ôÏùÑ Í≤ΩÏö∞ ÌòÑÏû¨ Ïú†Ï†ÄÏùò MBTIÏóêÏÑú Ìï¥Îãπ ÏúÑÏπòÏùò Í∞í ÏÇ¨Ïö©
                groupMBTI.append(currentUserMBTI.charAt(i));
            }
        }

        return groupMBTI.toString();
    }


    private interface OnMBTICalculatedListener {
        void onMBTICalculated(String teamMBTI);
    }

    private void saveTripData() {
        String travelName = binding.travelNameInput.getText().toString().trim();
        String location = binding.locationInput.getText().toString().trim();
        String placeToStay=binding.placeToStayInput.getText().toString().trim();
        String startDate = startDateInput.getText().toString().trim();
        String endDate = endDateInput.getText().toString().trim();
        String groupMBTI = currentMBTI.getText().toString().trim();
        String who = selectedWho;

        if (travelName.isEmpty() || location.isEmpty() || placeToStay.isEmpty()|| startDate.isEmpty() || endDate.isEmpty() || selectedWho.isEmpty() || selectedStyle.isEmpty()) {
            Toast.makeText(this, "Î™®Îì† Ìï≠Î™©ÏùÑ Ï±ÑÏõåÏ£ºÏÑ∏Ïöî!", Toast.LENGTH_SHORT).show();
            return;
        }

        SharedPreferences sharedPreferences = getSharedPreferences("UserPrefs", Context.MODE_PRIVATE);
        String userId = sharedPreferences.getString("userId", null);
        if (userId == null) {
            Toast.makeText(this, "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
            return;
        }

        ArrayList<String> selectedFriendsIds = getIntent().getStringArrayListExtra("selectedFriendsIds");

        calculateGroupMBTI(selectedFriendsIds, teamMBTI -> {
            FirebaseFirestore db = FirebaseFirestore.getInstance();
            String travelId = db.collection("users").document(userId)
                    .collection("travel").document().getId();

            Map<String, Object> travelData = new HashMap<>();
            travelData.put("travelId", travelId); // ÏπúÍµ¨ Ï™ΩÏóêÎèÑ travelId ÎèôÏùºÌïòÍ≤å Ï†ÄÏû•
            travelData.put("travelName", travelName);
            travelData.put("location", location);
            travelData.put("startDate", startDate);
            travelData.put("endDate", endDate);
            travelData.put("who", selectedWho);
            travelData.put("travelStyle", selectedStyle);
            travelData.put("teamMBTI", teamMBTI);
            travelData.put("teamId", teamId);
            travelData.put("creatorId", userId); // ÎàÑÍ∞Ä ÎßåÎì† Ïó¨ÌñâÏù∏ÏßÄ Î™ÖÏãú
            travelData.put("placeToStay",placeToStay);


            for (int i = 0; i < mustVisitContainer.getChildCount(); i++) {
                View child = mustVisitContainer.getChildAt(i);
                if (child instanceof LinearLayout) {
                    EditText placeInput = (EditText) ((LinearLayout) child).getChildAt(0);
                    String place = placeInput.getText().toString().trim();
                    if (!place.isEmpty()) {
                        travelData.put("place_" + i, place);
                    }
                }
            }

            // ÎÇòÏùò travel Í≤ΩÎ°úÏóê Ï†ÄÏû•
            db.collection("users").document(userId)
                    .collection("travel").document(travelId)
                    .set(travelData)
                    .addOnSuccessListener(aVoid -> {
                        // 2. ÏπúÍµ¨Îì§ travel Í≤ΩÎ°úÏóêÎèÑ ÎèôÏùºÌïòÍ≤å Ï†ÄÏû•
                        if (selectedFriendsIds != null && !selectedFriendsIds.isEmpty()) {
                            for (String friendId : selectedFriendsIds) {
                                db.collection("users").document(friendId)
                                        .collection("travel").document(travelId)
                                        .set(travelData);
                            }
                        }

                        Toast.makeText(this, "Ïó¨Ìñâ ÏùºÏ†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
                        Intent intent = new Intent(this, MainActivity.class);
                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
                        startActivity(intent);
                        finish();
                    })
                    .addOnFailureListener(e ->
                            Toast.makeText(this, "Ï†ÄÏû• Ïã§Ìå®: " + e.getMessage(), Toast.LENGTH_SHORT).show()
                    );

            // Ïó¨Ìñâ MBTIÏóê ÎßûÎäî Ïä§ÌÉÄÏùº ÏÑ§Î™Ö
            String groupMBTIStyle = "";

            switch (groupMBTI) {
                case "IBLF":
                    groupMBTIStyle = "IBLF: Í≥†Í∏â Ìò∏ÌÖîÏóêÏÑú ÏïÑÎäëÌïú ÌïòÎ£®Î•º Î≥¥ÎÇ¥Í≥†, ÎåÄÏ§ëÍµêÌÜµÏùÑ ÌÉÄÍ≥† ÎßõÏßëÏùÑ Ï∞æÏïÑ Îñ†ÎÇòÎäî Ïó¨Ïú†Î°úÏö¥ Ïó¨Ìñâ Ïä§ÌÉÄÏùº";
                    break;
                case "IBLM":
                    groupMBTIStyle = "IBLM: Í≥†Í∏â ÏàôÏÜåÏóêÏÑú ÌûêÎßÅÌïòÍ≥†, Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ ÌÉêÎ∞©ÌïòÎäî ÏßÄÏ†ÅÏù∏ Ïó¨Ìñâ Ïä§ÌÉÄÏùº";
                    break;
                case "IBSF":
                    groupMBTIStyle = "IBSF: ÍπîÎÅîÌïú ÏàôÏÜåÏóêÏÑú ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìï¥ ÏßÄÏó≠ ÎßõÏßëÏùÑ ÌÉêÎ∞©ÌïòÎäî ÏïåÎú∞Ìïú ÎØ∏ÏãùÍ∞Ä Ïä§ÌÉÄÏùº";
                    break;
                case "IBSM":
                    groupMBTIStyle = "IBSM: Ïã§ÎÇ¥ÏóêÏÑú Ï∞®Î∂ÑÌïòÍ≤å ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇ¥Í≥†, Î∞ïÎ¨ºÍ¥ÄÍ≥º Ï†ÑÏãúÌöå ÌÉêÎ∞©ÏùÑ Ï¢ãÏïÑÌïòÎäî Ïä§ÌÉÄÏùº";
                    break;
                case "ITLF":
                    groupMBTIStyle = "ITLF: ÌÉùÏãúÎ•º Ïù¥Ïö©Ìï¥ Í≥†Í∏â Ìò∏ÌÖîÏóêÏÑú ÌäπÎ≥ÑÌïú Î†àÏä§ÌÜ†ÎûëÏùÑ Í≤ΩÌóòÌïòÎäî Îü≠ÏÖîÎ¶¨ ÎØ∏Ïãù Ïó¨ÌñâÏûê Ïä§ÌÉÄÏùº";
                    break;
                case "ITLM":
                    groupMBTIStyle = "ITLM: Í∞êÏÑ±Ï†ÅÏù∏ Ïó¨ÌñâÏúºÎ°ú, Í≥†Í∏â ÏàôÏÜåÏóêÏÑú ÌÉùÏãúÎ•º Ïù¥Ïö©Ìï¥ Î∞ïÎ¨ºÍ¥ÄÍ≥º ÎØ∏Ïà†Í¥ÄÏùÑ ÌÉêÎ∞©ÌïòÎäî Ïä§ÌÉÄÏùº";
                    break;
                case "ITSF":
                    groupMBTIStyle = "ITSF: Ïù¥ÎèôÏùÄ ÌÉùÏãúÎ°ú Ìé∏Î¶¨ÌïòÍ≤å, Ïã§Ïö©Ï†ÅÏù∏ ÏàôÏÜåÏóêÏÑú ÌòÑÏßÄ ÎßõÏßëÏùÑ ÌÉêÎ∞©ÌïòÎäî Ïä§ÌÉÄÏùº";
                    break;
                case "ITSM":
                    groupMBTIStyle = "ITSM: Ïã§ÎÇ¥ÏóêÏÑú Ìé∏Ìûà Î®∏Î¨ºÎ©∞, ÌÉùÏãúÎ°ú Ìé∏ÌïòÍ≤å Î∞ïÎ¨ºÍ¥ÄÍ≥º Ïó≠ÏÇ¨ Î™ÖÏÜåÎ•º Ï∞æÏïÑÎã§ÎãàÎäî ÏßÄÏ†ÅÏù∏ Ïä§ÌÉÄÏùº";
                    break;
                case "OBLF":
                    groupMBTIStyle = "OBLF: Îü≠ÏÖîÎ¶¨ ÏàôÏÜåÏóêÏÑú ÎØ∏ÏãùÏùÑ Ï¶êÍ∏∞Î©∞, ÎåÄÏ§ëÍµêÌÜµÏúºÎ°ú Îã§ÏñëÌïú Ïû•ÏÜåÎ•º ÌÉêÎ∞©ÌïòÎäî ÏûêÏó∞Í≥º ÎØ∏ÏãùÏùò Ï°∞ÌôîÎ•º ÏÇ¨ÎûëÌïòÎäî Ïä§ÌÉÄÏùº";
                    break;
                case "OBLM":
                    groupMBTIStyle = "OBLM: ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìï¥ Í∞êÏÑ± ÎÑòÏπòÎäî Ïó¨ÌñâÏùÑ Ï¶êÍ∏∞Í≥†, Î∞ïÎ¨ºÍ¥ÄÍ≥º Ï†ÑÏãúÌöåÎèÑ ÎπºÎÜìÏßÄ ÏïäÎäî Ïä§ÌÉÄÏùº";
                    break;
                case "OBSF":
                    groupMBTIStyle = "OBSF: ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìï¥ ÏãúÏû•Í≥º Í∏∏Í±∞Î¶¨ ÏùåÏãùÏùÑ ÌÉêÎ∞©ÌïòÎ©∞ Í∞ÄÏÑ±ÎπÑÎ•º Ï§ëÏãúÌïòÎäî Ïä§ÌÉÄÏùº";
                    break;
                case "OBSM":
                    groupMBTIStyle = "OBSM: Î∞ïÎ¨ºÍ¥ÄÍ≥º Ïó≠ÏÇ¨Ï†Å Î™ÖÏÜåÎ•º Î∞©Î¨∏ÌïòÍ≥†, ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©Ìïú Í∞ÄÏÑ±ÎπÑ Ï¢ãÏùÄ Ïó¨Ìñâ Ïä§ÌÉÄÏùº";
                    break;
                case "OTLF":
                    groupMBTIStyle = "OTLF: Îü≠ÏÖîÎ¶¨ ÏàôÏÜåÏóêÏÑú ÎØ∏ÏãùÏùÑ Ï¶êÍ∏∞Î©∞, ÌÉùÏãúÎ°ú Ìé∏ÌïòÍ≤å Ïù¥ÎèôÌïòÎäî Ïó¨Ìñâ Ïä§ÌÉÄÏùº";
                    break;
                case "OTLM":
                    groupMBTIStyle = "OTLM: Í≥†Í∏â ÏàôÏÜåÏóêÏÑú ÏòàÏà†Í≥º Ïó≠ÏÇ¨Ï†Å Î™ÖÏÜåÎ•º Ï∞æÏïÑ Îã§ÎãàÎäî Í∞êÏÑ±Ï†ÅÏù∏ Ïó¨Ìñâ Ïä§ÌÉÄÏùº";
                    break;
                case "OTSF":
                    groupMBTIStyle = "OTSF: ÎπÑÏãº ÏàôÏÜåÎ≥¥Îã§Îäî Í∞ÄÏÑ±ÎπÑÍ∞Ä Ï§ëÏöîÌïòÎ©∞, ÌÉùÏãúÎ°ú Ïù¥ÎèôÌï¥ ÏßÄÏó≠ ÌäπÏÇ∞Î¨ºÏùÑ Ï∞æÏïÑ Îñ†ÎÇòÎäî Ïó¨Ìñâ Ïä§ÌÉÄÏùº";
                    break;
                case "OTSM":
                    groupMBTIStyle = "OTSM: Í∞ÄÏÑ±ÎπÑ ÏàôÏÜåÏóêÏÑú ÌÉùÏãúÎ°ú Î∞ïÎ¨ºÍ¥ÄÍ≥º ÏûêÏó∞ÏùÑ Î™®Îëê Í≤ΩÌóòÌïòÎäî Ïó¨Ìñâ Ïä§ÌÉÄÏùº";
                    break;
                default:
                    groupMBTIStyle = "Ïù¥ Ïú†ÌòïÏùÄ ÏïÑÏßÅ Ï†ïÏùòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.";
                    break;
            }
            // GPT API ÌîÑÎ°¨ÌîÑÌä∏ Îã§Ïãú ÌïòÍ∏∞
            // GPT ÌîÑÎ°¨ÌîÑÌä∏
            StringBuilder prompt = new StringBuilder();
            prompt.append("ÎÑàÎäî Ïú†Î™ÖÌïú Ïó¨Ìñâ Í≥ÑÌöç Ï†ÑÎ¨∏Í∞ÄÏïº.");
            prompt.append("ÎÇòÎäî ").append(startDate).append("Î∂ÄÌÑ∞ ").append(endDate).append("ÍπåÏßÄ Ïó¨ÌñâÏùÑ Í∞Ä.\n");
            prompt.append("Ïû•ÏÜåÎäî ").append(location).append("Ïïº.");
            prompt.append("ÏàôÏÜåÎäî ").append(placeToStay).append("Ïóê ÏûàÏñ¥. ÏàôÏÜå ÏúÑÏπòÎ•º Ï§ëÏã¨ÏúºÎ°ú ÎèôÏÑ†ÏùÑ Í≥†Î†§Ìï¥ÏÑú ÏßúÏ§ò.\n");
            prompt.append("Ïó¨Ìñâ Ïä§ÌÉÄÏùºÏùÄ ").append(groupMBTI).append("Ïù¥Í≥† ").append("Ïù¥ Ïä§ÌÉÄÏùºÏùÄ ").append(groupMBTIStyle).append("Ïù¥ÎùºÍ≥† Ìï† Ïàò ÏûàÏñ¥.");
            prompt.append("Ïó¨Ìñâ Ïä§ÌÉÄÏùºÏùÑ ÌÜµÌï¥ Ïïå Ïàò ÏûàÎäî ÏÑ†Ìò∏ÌïòÎäî ÍµêÌÜµ ÏàòÎã®ÏùÑ Ï§ëÏã¨ÏúºÎ°ú ÏßúÏ§òÎèÑ ÎêòÏßÄÎßå ÎÑàÎ¨¥ Ìï¥Îãπ ÍµêÌÜµÏàòÎã®Îßå Ïù¥Ïö©ÌïòÏßÄ ÏïäÏïÑÎèÑ Îèº.");
            prompt.append(who).append("ÏôÄ(Í≥º) Ìï®Íªò Í∞Ä\n");

            if (!travelData.isEmpty()) {
                List<String> places = new ArrayList<>();
                for (Map.Entry<String, Object> entry : travelData.entrySet()) {
                    // "place_"Î°ú ÏãúÏûëÌïòÎäî ÌÇ§Îßå ÌïÑÌÑ∞ÎßÅ
                    if (entry.getKey().startsWith("place_") && entry.getValue() instanceof String) {
                        String place = ((String) entry.getValue()).trim();
                        if (!place.isEmpty()) {
                            places.add(place);
                        }
                    }
                }
                prompt.append("Íº≠ Í∞ÄÏïº ÌïòÎäî Ïû•ÏÜåÎäî ").append(String.join(", ", places)).append(" Ïù¥Ïïº.\n");
            }
            prompt.append("ÏïÑÎûòÏôÄ Í∞ôÏùÄ JSON Î∞∞Ïó¥ ÌòïÏãùÏúºÎ°ú ÏùëÎãµÌï¥Ï§ò. ÏÑ§Î™ÖÏùÄ Ï†àÎåÄ ÌïòÏßÄ ÎßêÍ≥† JSON Îç∞Ïù¥ÌÑ∞Îßå Î∞òÌôòÌï¥. ÌòïÏãùÏùÄ Îã§ÏùåÍ≥º Í∞ôÏïÑ:\n\n");

            prompt.append("[\n");
            prompt.append("  {\n");
            prompt.append("    \"date\": \"YYYY.MM.DD\",\n");
            prompt.append("    \"places\": [\n");
            prompt.append("      {\n");
            prompt.append("        \"place\": \"Ïû•ÏÜå Ïù¥Î¶Ñ\",\n");
            prompt.append("        \"coord\": \"ÏúÑÎèÑ,Í≤ΩÎèÑ\",\n");
            prompt.append("        \"category\": \"Í¥ÄÍ¥ëÏßÄ, ÏùåÏãùÏ†ê, Ïπ¥Ìéò Îì±\",\n");
            prompt.append("        \"transport\": \"ÎèÑÎ≥¥, ÌÉùÏãú, Î≤ÑÏä§ Îì±\",\n");
            prompt.append("        \"time\": \"Ïù¥Ï†Ñ Ïû•ÏÜåÏóêÏÑú Ìï¥Îãπ Ïû•ÏÜåÎ•º Í∞ÄÎäîÎç∞ ÏòàÏÉÅ Ïù¥Îèô ÏãúÍ∞Ñ\"\n");
            prompt.append("      }\n");
            prompt.append("    ]\n");
            prompt.append("  }\n");
            prompt.append("]\n");


            prompt.append("Ïù¥Îü∞ ÌòïÏãùÏúºÎ°ú ÌïòÎ£®ÌïòÎ£®Î•º ÎÇòÎà†ÏÑú JSON Î∞∞Ïó¥Î°ú Íµ¨ÏÑ±Ìï¥ÏÑú Ï§ò. ÏòàÏãú ÎßêÍ≥† ÏßÑÏßú Îç∞Ïù¥ÌÑ∞Î•º ÎÑ£Ïñ¥ÏÑú, ÎÇ†ÏßúÎ≥ÑÎ°ú ÌïòÎ£®Ïóê 5~7Í∞ú Ïû•ÏÜåÎ•º ÎÑ£Ïñ¥Ï§ò.\n");
            prompt.append("ÏãùÏÇ¨Îäî ÌïòÎ£® 3Î≤à Ìè¨Ìï®ÎêòÏñ¥Ïïº ÌïòÍ≥†, Ïπ¥ÌéòÎäî ÌïòÎ£®Ïóê Ìïú Î≤à Ï†ïÎèÑÍ∞Ä Ï¢ãÏùÄ Í≤É Í∞ôÏïÑ.\n");
            prompt.append("Í∑∏Î¶¨Í≥† Ï†ÑÏóê Í∞îÎçò Ïû•ÏÜåÎ•º Îòê Í∞ÄÎäî Í±¥ ÏõêÌïòÏßÄ ÏïäÏïÑ.");
            prompt.append("Íº≠ Î∞©Î¨∏Ìï¥Ïïº ÌïòÎäî Ïû•ÏÜåÎäî ÌïòÎ£®Ïóê Î™®Îëê ÎÑ£ÏùÑ ÌïÑÏöîÎäî ÏóÜÏñ¥. Ïù¥Îèô ÏãúÍ∞ÑÏùÄ Î∞òÎìúÏãú 30Î∂Ñ Ïù¥ÎÇ¥Í∞Ä ÎêòÎèÑÎ°ù ÎèôÏÑ†ÏùÑ Í≥†Î†§Ìï¥ÏÑú ÏßúÏ§ò.\n");
            prompt.append("Í∑∏Î¶¨Í≥† ÎßàÏßÄÎßâÏùÄ Ï†àÎåÄ 'Ïù¥ÏÉÅÏûÖÎãàÎã§' Í∞ôÏùÄ Îßê ÏóÜÏù¥ JSONÎßå Î∞òÌôòÌïòÍ≥† Î¨¥Ï°∞Í±¥ ÌïúÍ∏ÄÎ°úÎßå ÎãµÌï¥Ï§ò.");

            ApiService apiService = ApiClient.getRetrofit().create(ApiService.class);

            List<GptRequest.Message> messages = new ArrayList<>();
            messages.add(new GptRequest.Message("user", prompt.toString()));

            GptRequest gptRequest = new GptRequest("gpt-3.5-turbo", messages);

            // ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞Î•º JSON ÌòïÏãùÏúºÎ°ú Î°úÍ∑∏Ïóê Ï∂úÎ†•
            Log.d("GPT", "Sending Request: " + new Gson().toJson(gptRequest));

            // GPT ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞
            apiService.getGptAnswer(gptRequest).enqueue(new retrofit2.Callback<GptResponse>() {
                @Override
                public void onResponse(Call<GptResponse> call, retrofit2.Response<GptResponse> response) {
                    if (response.isSuccessful() && response.body() != null) {
                        String gptReply = response.body().choices.get(0).message.content;
                        Log.d("GPT", "GPT Reply: " + gptReply);

                        // GPT ÏùëÎãµÏùÑ GptTripPlanActivityÎ°ú ÎÑòÍ∏∞Í∏∞
                        Intent intent = new Intent(AddTripActivity.this, GptTripPlanActivity.class);
                        intent.putExtra("travelName", travelName);
                        intent.putExtra("startDate", startDate);
                        intent.putExtra("endDate", endDate);
                        intent.putExtra("travelId",travelId);
                        intent.putExtra("gpt_schedule", gptReply);
                        startActivity(intent);
                    } else {
                        Log.e("GPT", "Response error: " + response.code());
                        if (response.errorBody() != null) {
                            try {
                                String errorResponse = response.errorBody().string();
                                Log.e("GPT", "Error body: " + errorResponse);
                            } catch (IOException e) {
                                Log.e("GPT", "Error reading error body", e);
                            }
                        }
                        Toast.makeText(AddTripActivity.this, "GPT ÏùëÎãµ Ïã§Ìå®", Toast.LENGTH_SHORT).show();
                    }

                }

                @Override
                public void onFailure(Call<GptResponse> call, Throwable t) {
                    Toast.makeText(AddTripActivity.this, "GPT Ìò∏Ï∂ú ÏóêÎü¨", Toast.LENGTH_SHORT).show();
                    Log.e("GPT", "ÏóêÎü¨: " + t.getMessage());
                }
            });
        });
    }

    // Ïû•ÏÜåÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å ÏÑ†ÌÉù
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_CODE_LOCATION && resultCode == RESULT_OK && data != null) {
            String selectedLocation = data.getStringExtra("selected_location");
            if (selectedLocation != null) {
                binding.locationInput.setText(selectedLocation);
            }
        }
    }
}